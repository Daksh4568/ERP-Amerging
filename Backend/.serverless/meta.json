{
  "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\serverless.yml": {
    "versionFramework": "4.6.2",
    "servicePath": "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "developer4568",
      "service": "enterprise-resource-planning",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "ap-south-1",
        "timeout": 30,
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "maxAge": 86400
          }
        },
        "environment": {
          "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
          "JWT_SECRET": "<REDACTED>",
          "EMAIL_USER": "daksh4568thakur@gmail.com",
          "EMAIL_PASSWORD": "<REDACTED>"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "HomeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
              }
            },
            "GetAllEmployeesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
              }
            },
            "GetLeaveDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
              }
            },
            "ApplyLeaveLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
              }
            },
            "EmployeeEvaluationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
              }
            },
            "EmployeeStatisticsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
              }
            },
            "RegisterEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
              }
            },
            "EmployeeLoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
              }
            },
            "EmployeeLogoutLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
              }
            },
            "TokenVerifyLogGroup": "<REDACTED>",
            "UpdateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
              }
            },
            "ManagerNotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
              }
            },
            "HandleNotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
              }
            },
            "EmployeeExitFormLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
              }
            },
            "ExpenseSubmitLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
              }
            },
            "ExpenseApproveLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
              }
            },
            "ExpenseAccountsUpdateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
              }
            },
            "GetAllExpensesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
              }
            },
            "GetApprovedExpensesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "enterprise-resource-planning",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "enterprise-resource-planning",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "HomeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-home",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HomeLogGroup"
              ]
            },
            "GetAllEmployeesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllEmployeesLogGroup"
              ]
            },
            "GetLeaveDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetLeaveDataLogGroup"
              ]
            },
            "ApplyLeaveLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-applyLeave",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApplyLeaveLogGroup"
              ]
            },
            "EmployeeEvaluationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeEvaluationLogGroup"
              ]
            },
            "EmployeeStatisticsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeStatisticsLogGroup"
              ]
            },
            "RegisterEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterEmployeeLogGroup"
              ]
            },
            "EmployeeLoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeLoginLogGroup"
              ]
            },
            "EmployeeLogoutLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeLogoutLogGroup"
              ]
            },
            "TokenVerifyLambdaFunction": "<REDACTED>",
            "UpdateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEmployeeLogGroup"
              ]
            },
            "ManagerNotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ManagerNotificationsLogGroup"
              ]
            },
            "HandleNotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HandleNotificationsLogGroup"
              ]
            },
            "EmployeeExitFormLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeExitFormLogGroup"
              ]
            },
            "ExpenseSubmitLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseSubmitLogGroup"
              ]
            },
            "ExpenseApproveLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseApproveLogGroup"
              ]
            },
            "ExpenseAccountsUpdateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseAccountsUpdateLogGroup"
              ]
            },
            "GetAllExpensesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllExpensesLogGroup"
              ]
            },
            "GetApprovedExpensesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "daksh4568thakur@gmail.com",
                    "EMAIL_PASSWORD": "<REDACTED>"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetApprovedExpensesLogGroup"
              ]
            },
            "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HomeLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllEmployeesLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetLeaveDataLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApplyLeaveLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeEvaluationLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeStatisticsLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterEmployeeLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeLoginLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeLogoutLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "TokenVerifyLambdaVersionzBTXDaLgXgtNojwoe6d5z1fsQQ4m7eJ4Hr1m5mt8Fw": "<REDACTED>",
            "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEmployeeLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ManagerNotificationsLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HandleNotificationsLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeExitFormLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseSubmitLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseApproveLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseAccountsUpdateLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllExpensesLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetApprovedExpensesLambdaFunction"
                },
                "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-enterprise-resource-planning",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "AllowOrigins": [
                    "*"
                  ],
                  "MaxAge": 86400
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "HomeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationHome": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGet": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationHome"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationHome"
            },
            "GetAllEmployeesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllEmployees": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetemp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/getemp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllEmployees"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllEmployees"
            },
            "GetLeaveDataLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetLeaveDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetLeaveData": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetLeaveDataLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiLeaveDashdata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/leave-data",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetLeaveData"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetLeaveData"
            },
            "ApplyLeaveLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApplyLeaveLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApplyLeave": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ApplyLeaveLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiApplyDashleave": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/apply-leave",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApplyLeave"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApplyLeave"
            },
            "EmployeeEvaluationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeEvaluation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmployeeDashevaluation": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/employee-evaluation",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeEvaluation"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
            },
            "EmployeeStatisticsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeStatisticsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeStatistics": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeStatisticsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiEmpStats": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/emp/stats",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeStatistics"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeStatistics"
            },
            "RegisterEmployeeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationRegisterEmployee": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "RegisterEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiRegemp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/regemp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationRegisterEmployee"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationRegisterEmployee"
            },
            "EmployeeLoginLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeLogin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmpLogin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/emp/login",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeLogin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeLogin"
            },
            "EmployeeLogoutLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeLogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeLogout": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeLogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmpLogout": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/emp/logout",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeLogout"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeLogout"
            },
            "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
            "HttpApiIntegrationTokenVerify": "<REDACTED>",
            "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
            "UpdateEmployeeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateEmployee": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiEmpEidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/emp/{eID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateEmployee"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateEmployee"
            },
            "ManagerNotificationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ManagerNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationManagerNotifications": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ManagerNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiNotificationsManager": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/notifications/manager",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationManagerNotifications"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationManagerNotifications"
            },
            "HandleNotificationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HandleNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationHandleNotifications": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "HandleNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiNotificationsHandle": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/notifications/handle",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationHandleNotifications"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationHandleNotifications"
            },
            "EmployeeExitFormLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeExitFormLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeExitForm": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeExitFormLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiExitDashform": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/exit-form",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeExitForm"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeExitForm"
            },
            "ExpenseSubmitLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseSubmitLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseSubmit": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseSubmitLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiExpense": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/expense",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseSubmit"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseSubmit"
            },
            "ExpenseApproveLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseApproveLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseApprove": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseApproveLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/expense/{refNo}/approve",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseApprove"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseApprove"
            },
            "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseAccountsUpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseAccountsUpdate": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseAccountsUpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/expense/{refNo}/accounts",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
            },
            "GetAllExpensesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllExpenses": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiExpenses": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/expenses",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllExpenses"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllExpenses"
            },
            "GetApprovedExpensesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetApprovedExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetApprovedExpenses": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetApprovedExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiExpensesApproved": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/expenses/approved",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetApprovedExpenses"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
            },
            "NotificationsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Notifications",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "notificationId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "notificationId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
              }
            },
            "HomeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
              }
            },
            "GetAllEmployeesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
              }
            },
            "GetLeaveDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
              }
            },
            "ApplyLeaveLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeEvaluationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeStatisticsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
              }
            },
            "RegisterEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeLoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeLogoutLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
              }
            },
            "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
            "UpdateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "ManagerNotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
              }
            },
            "HandleNotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeExitFormLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseSubmitLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseApproveLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
              }
            },
            "GetAllExpensesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
              }
            },
            "GetApprovedExpensesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "home": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/"
            }
          ],
          "name": "enterprise-resource-planning-dev-home",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w"
        },
        "getAllEmployees": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/getemp",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/getemp"
            }
          ],
          "name": "enterprise-resource-planning-dev-getAllEmployees",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA"
        },
        "getLeaveData": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/leave-data",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/leave-data"
            }
          ],
          "name": "enterprise-resource-planning-dev-getLeaveData",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU"
        },
        "applyLeave": {
          "handler": "src/routes/empMaster-route.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/api/apply-leave",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/apply-leave"
            }
          ],
          "name": "enterprise-resource-planning-dev-applyLeave",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc"
        },
        "employeeEvaluation": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/employee-evaluation",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/employee-evaluation"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeEvaluation",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ"
        },
        "employeeStatistics": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/stats",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/emp/stats"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeStatistics",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs"
        },
        "registerEmployee": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/regemp",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/regemp"
            }
          ],
          "name": "enterprise-resource-planning-dev-registerEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME"
        },
        "employeeLogin": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/login",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/emp/login"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeLogin",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc"
        },
        "employeeLogout": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/logout",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/emp/logout"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeLogout",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4"
        },
        "tokenVerify": "<REDACTED>",
        "updateEmployee": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/{eID}",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/emp/{eID}"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM"
        },
        "managerNotifications": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/notifications/manager",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/notifications/manager"
            }
          ],
          "name": "enterprise-resource-planning-dev-managerNotifications",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0"
        },
        "handleNotifications": {
          "handler": "src/routes/empMaster-route.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/api/notifications/handle",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/notifications/handle"
            }
          ],
          "name": "enterprise-resource-planning-dev-handleNotifications",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk"
        },
        "employeeExitForm": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/exit-form",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/exit-form"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeExitForm",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw"
        },
        "expenseSubmit": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/expense"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseSubmit",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg"
        },
        "expenseApprove": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense/{refNo}/approve",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/expense/{refNo}/approve"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseApprove",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw"
        },
        "expenseAccountsUpdate": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense/{refNo}/accounts",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/expense/{refNo}/accounts"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseAccountsUpdate",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc"
        },
        "getAllExpenses": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expenses",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/expenses"
            }
          ],
          "name": "enterprise-resource-planning-dev-getAllExpenses",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU"
        },
        "getApprovedExpenses": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expenses/approved",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/expenses/approved"
            }
          ],
          "name": "enterprise-resource-planning-dev-getApprovedExpenses",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "resources": {
        "Resources": {
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      },
      "custom": {
        "serverless-offline": {
          "httpPort": 3000
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-south-1",
      "timeout": 30,
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "maxAge": 86400
        }
      },
      "environment": {
        "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
        "JWT_SECRET": "<REDACTED>",
        "EMAIL_USER": "daksh4568thakur@gmail.com",
        "EMAIL_PASSWORD": "<REDACTED>"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
            }
          },
          "GetAllEmployeesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
            }
          },
          "GetLeaveDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
            }
          },
          "ApplyLeaveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
            }
          },
          "EmployeeEvaluationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
            }
          },
          "EmployeeStatisticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
            }
          },
          "RegisterEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
            }
          },
          "EmployeeLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
            }
          },
          "EmployeeLogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
            }
          },
          "TokenVerifyLogGroup": "<REDACTED>",
          "UpdateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
            }
          },
          "ManagerNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
            }
          },
          "HandleNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
            }
          },
          "EmployeeExitFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
            }
          },
          "ExpenseSubmitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
            }
          },
          "ExpenseApproveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
            }
          },
          "ExpenseAccountsUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
            }
          },
          "GetAllExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
            }
          },
          "GetApprovedExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "enterprise-resource-planning",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "enterprise-resource-planning",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-home",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "GetAllEmployeesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllEmployeesLogGroup"
            ]
          },
          "GetLeaveDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaveDataLogGroup"
            ]
          },
          "ApplyLeaveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-applyLeave",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApplyLeaveLogGroup"
            ]
          },
          "EmployeeEvaluationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeEvaluationLogGroup"
            ]
          },
          "EmployeeStatisticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeStatisticsLogGroup"
            ]
          },
          "RegisterEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterEmployeeLogGroup"
            ]
          },
          "EmployeeLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLoginLogGroup"
            ]
          },
          "EmployeeLogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLogoutLogGroup"
            ]
          },
          "TokenVerifyLambdaFunction": "<REDACTED>",
          "UpdateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeLogGroup"
            ]
          },
          "ManagerNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ManagerNotificationsLogGroup"
            ]
          },
          "HandleNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleNotificationsLogGroup"
            ]
          },
          "EmployeeExitFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeExitFormLogGroup"
            ]
          },
          "ExpenseSubmitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseSubmitLogGroup"
            ]
          },
          "ExpenseApproveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseApproveLogGroup"
            ]
          },
          "ExpenseAccountsUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseAccountsUpdateLogGroup"
            ]
          },
          "GetAllExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllExpensesLogGroup"
            ]
          },
          "GetApprovedExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "<REDACTED>"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetApprovedExpensesLogGroup"
            ]
          },
          "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllEmployeesLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaveDataLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApplyLeaveLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeEvaluationLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeStatisticsLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterEmployeeLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLoginLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLogoutLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "TokenVerifyLambdaVersionzBTXDaLgXgtNojwoe6d5z1fsQQ4m7eJ4Hr1m5mt8Fw": "<REDACTED>",
          "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ManagerNotificationsLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleNotificationsLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeExitFormLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseSubmitLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseApproveLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseAccountsUpdateLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllExpensesLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetApprovedExpensesLambdaFunction"
              },
              "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-enterprise-resource-planning",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "AllowOrigins": [
                  "*"
                ],
                "MaxAge": 86400
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HomeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHome": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHome"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHome"
          },
          "GetAllEmployeesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllEmployees": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllEmployees"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllEmployees"
          },
          "GetLeaveDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetLeaveData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiLeaveDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/leave-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetLeaveData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetLeaveData"
          },
          "ApplyLeaveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApplyLeave": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiApplyDashleave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/apply-leave",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApplyLeave"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApplyLeave"
          },
          "EmployeeEvaluationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeEvaluation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmployeeDashevaluation": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/employee-evaluation",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeEvaluation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
          },
          "EmployeeStatisticsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeStatistics": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiEmpStats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/emp/stats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeStatistics"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeStatistics"
          },
          "RegisterEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiRegemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/regemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterEmployee"
          },
          "EmployeeLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogin"
          },
          "EmployeeLogoutLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogout": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogout"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogout"
          },
          "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
          "HttpApiIntegrationTokenVerify": "<REDACTED>",
          "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
          "UpdateEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiEmpEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployee"
          },
          "ManagerNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationManagerNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiNotificationsManager": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/notifications/manager",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationManagerNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationManagerNotifications"
          },
          "HandleNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHandleNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiNotificationsHandle": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/notifications/handle",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHandleNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHandleNotifications"
          },
          "EmployeeExitFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeExitForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExitDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/exit-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeExitForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeExitForm"
          },
          "ExpenseSubmitLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseSubmit": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExpense": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/expense",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseSubmit"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseSubmit"
          },
          "ExpenseApproveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseApprove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/approve",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseApprove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseApprove"
          },
          "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseAccountsUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/accounts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
          },
          "GetAllExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpenses": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllExpenses"
          },
          "GetApprovedExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetApprovedExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpensesApproved": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses/approved",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetApprovedExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmployeesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaveDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
            }
          },
          "ApplyLeaveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeEvaluationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeStatisticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
            }
          },
          "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
          "UpdateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "ManagerNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "HandleNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeExitFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseSubmitLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseApproveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
            }
          },
          "GetAllExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetApprovedExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: developer4568\r\nservice: enterprise-resource-planning # Name of your service/project\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: ap-south-1\r\n  timeout: 30\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedHeaders:\r\n        - Content-Type\r\n        - Authorization\r\n      allowedMethods:\r\n        - GET\r\n        - POST\r\n        - PUT\r\n        - DELETE\r\n        - PATCH\r\n      maxAge: 86400 # Cache preflight response for 24 hours\r\n  environment:\r\n    MONGO_URI: mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/\r\n    JWT_SECRET: amergingtech5757\r\n    EMAIL_USER: daksh4568thakur@gmail.com\r\n    EMAIL_PASSWORD: jygu sxbi fvnf sczm\r\n\r\nfunctions:\r\n  home:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /\r\n          method: GET\r\n\r\n  getAllEmployees:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/getemp\r\n          method: GET\r\n\r\n  getLeaveData:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/leave-data\r\n          method: GET\r\n\r\n  applyLeave:\r\n    handler: src/routes/empMaster-route.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /api/apply-leave\r\n          method: POST\r\n\r\n  employeeEvaluation:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/employee-evaluation\r\n          method: POST\r\n\r\n  employeeStatistics:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/stats\r\n          method: GET\r\n\r\n  registerEmployee:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/regemp\r\n          method: POST\r\n\r\n  employeeLogin:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/login\r\n          method: POST\r\n\r\n  employeeLogout:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/logout\r\n          method: POST\r\n\r\n  tokenVerify:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/token/verify\r\n          method: POST\r\n\r\n  updateEmployee:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/{eID}\r\n          method: PATCH\r\n\r\n  managerNotifications:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/notifications/manager\r\n          method: GET\r\n\r\n  handleNotifications:\r\n    handler: src/routes/empMaster-route.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /api/notifications/handle\r\n          method: PATCH\r\n\r\n  employeeExitForm:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/exit-form\r\n          method: POST\r\n\r\n  expenseSubmit:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense\r\n          method: POST\r\n\r\n  expenseApprove:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense/{refNo}/approve\r\n          method: PATCH\r\n\r\n  expenseAccountsUpdate:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense/{refNo}/accounts\r\n          method: PATCH\r\n\r\n  getAllExpenses:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expenses\r\n          method: GET\r\n\r\n  getApprovedExpenses:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expenses/approved\r\n          method: GET\r\n\r\nplugins:\r\n  - serverless-offline\r\n\r\nresources:\r\n  Resources:\r\n    NotificationsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Notifications\r\n        AttributeDefinitions:\r\n          - AttributeName: notificationId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: notificationId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\ncustom:\r\n  serverless-offline:\r\n    httpPort: 3000\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "39c97180-ccce-4727-9ced-6991ccb34e01",
    "orgName": "developer4568",
    "userId": "7d9kqX7vMPt9c1rLFh",
    "userName": "developer4568",
    "serviceProviderAwsAccountId": "430118818238",
    "serviceProviderAwsCfStackName": "enterprise-resource-planning-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:430118818238:stack/enterprise-resource-planning-dev/1b592e20-da21-11ef-a84d-0a355666f9c7",
    "serviceProviderAwsCfStackCreated": "2025-01-24T07:02:00.636Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-12T10:49:31.046Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "EmployeeLogoutLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeLogout:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeStatisticsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeStatistics:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseApproveLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseApprove:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeEvaluationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeEvaluation:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HomeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-home:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseAccountsUpdateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseAccountsUpdate:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "risabllrw6",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-enterprise-resource-planning-dev-HttpApiId"
      },
      {
        "OutputKey": "UpdateEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateEmployee:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
        "ExportName": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://risabllrw6.execute-api.ap-south-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-enterprise-resource-planning-dev-HttpApiUrl"
      },
      {
        "OutputKey": "GetAllEmployeesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getAllEmployees:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RegisterEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-registerEmployee:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetApprovedExpensesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getApprovedExpenses:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseSubmitLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseSubmit:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeExitFormLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeExitForm:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TokenVerifyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-tokenVerify:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ManagerNotificationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-managerNotifications:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HandleNotificationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-handleNotifications:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetLeaveDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getLeaveData:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ApplyLeaveLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-applyLeave:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeLoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeLogin:7",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllExpensesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getAllExpenses:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "HomeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
          }
        },
        "GetAllEmployeesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
          }
        },
        "GetLeaveDataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
          }
        },
        "ApplyLeaveLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
          }
        },
        "EmployeeEvaluationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
          }
        },
        "EmployeeStatisticsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
          }
        },
        "RegisterEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
          }
        },
        "EmployeeLoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
          }
        },
        "EmployeeLogoutLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
          }
        },
        "TokenVerifyLogGroup": "<REDACTED>",
        "UpdateEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
          }
        },
        "ManagerNotificationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
          }
        },
        "HandleNotificationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
          }
        },
        "EmployeeExitFormLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
          }
        },
        "ExpenseSubmitLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
          }
        },
        "ExpenseApproveLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
          }
        },
        "ExpenseAccountsUpdateLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
          }
        },
        "GetAllExpensesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
          }
        },
        "GetApprovedExpensesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "enterprise-resource-planning",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "enterprise-resource-planning",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "HomeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-home",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HomeLogGroup"
          ]
        },
        "GetAllEmployeesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllEmployeesLogGroup"
          ]
        },
        "GetLeaveDataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetLeaveDataLogGroup"
          ]
        },
        "ApplyLeaveLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-applyLeave",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApplyLeaveLogGroup"
          ]
        },
        "EmployeeEvaluationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeEvaluationLogGroup"
          ]
        },
        "EmployeeStatisticsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeStatisticsLogGroup"
          ]
        },
        "RegisterEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RegisterEmployeeLogGroup"
          ]
        },
        "EmployeeLoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeLoginLogGroup"
          ]
        },
        "EmployeeLogoutLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeLogoutLogGroup"
          ]
        },
        "TokenVerifyLambdaFunction": "<REDACTED>",
        "UpdateEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateEmployeeLogGroup"
          ]
        },
        "ManagerNotificationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ManagerNotificationsLogGroup"
          ]
        },
        "HandleNotificationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HandleNotificationsLogGroup"
          ]
        },
        "EmployeeExitFormLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeExitFormLogGroup"
          ]
        },
        "ExpenseSubmitLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseSubmitLogGroup"
          ]
        },
        "ExpenseApproveLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseApproveLogGroup"
          ]
        },
        "ExpenseAccountsUpdateLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseAccountsUpdateLogGroup"
          ]
        },
        "GetAllExpensesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllExpensesLogGroup"
          ]
        },
        "GetApprovedExpensesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1739506775914-2025-02-14T04:19:35.914Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "daksh4568thakur@gmail.com",
                "EMAIL_PASSWORD": "<REDACTED>"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetApprovedExpensesLogGroup"
          ]
        },
        "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HomeLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllEmployeesLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetLeaveDataLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApplyLeaveLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeEvaluationLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeStatisticsLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RegisterEmployeeLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeLoginLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeLogoutLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "TokenVerifyLambdaVersionzBTXDaLgXgtNojwoe6d5z1fsQQ4m7eJ4Hr1m5mt8Fw": "<REDACTED>",
        "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateEmployeeLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ManagerNotificationsLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HandleNotificationsLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeExitFormLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseSubmitLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseApproveLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseAccountsUpdateLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllExpensesLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetApprovedExpensesLambdaFunction"
            },
            "CodeSha256": "tYDvPggD69Py2PE4ovt2KlHdRq8y+OgK6AB4eLhfuh8="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-enterprise-resource-planning",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "Authorization"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ],
              "AllowOrigins": [
                "*"
              ],
              "MaxAge": 86400
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "HomeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HomeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationHome": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "HomeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGet": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationHome"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationHome"
        },
        "GetAllEmployeesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllEmployeesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllEmployees": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllEmployeesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiGetemp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/getemp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllEmployees"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllEmployees"
        },
        "GetLeaveDataLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetLeaveDataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetLeaveData": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetLeaveDataLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiLeaveDashdata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/leave-data",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetLeaveData"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetLeaveData"
        },
        "ApplyLeaveLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApplyLeaveLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationApplyLeave": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ApplyLeaveLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiApplyDashleave": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/apply-leave",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApplyLeave"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApplyLeave"
        },
        "EmployeeEvaluationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeEvaluation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmployeeDashevaluation": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/employee-evaluation",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeEvaluation"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
        },
        "EmployeeStatisticsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeStatisticsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeStatistics": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeStatisticsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiEmpStats": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/emp/stats",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeStatistics"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeStatistics"
        },
        "RegisterEmployeeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegisterEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationRegisterEmployee": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "RegisterEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiRegemp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/regemp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationRegisterEmployee"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationRegisterEmployee"
        },
        "EmployeeLoginLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeLoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeLogin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeLoginLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmpLogin": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/emp/login",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeLogin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeLogin"
        },
        "EmployeeLogoutLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeLogoutLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeLogout": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeLogoutLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmpLogout": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/emp/logout",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeLogout"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeLogout"
        },
        "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
        "HttpApiIntegrationTokenVerify": "<REDACTED>",
        "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
        "UpdateEmployeeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateEmployee": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiEmpEidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/emp/{eID}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateEmployee"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateEmployee"
        },
        "ManagerNotificationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ManagerNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationManagerNotifications": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ManagerNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiNotificationsManager": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/notifications/manager",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationManagerNotifications"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationManagerNotifications"
        },
        "HandleNotificationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HandleNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationHandleNotifications": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "HandleNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiNotificationsHandle": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/notifications/handle",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationHandleNotifications"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationHandleNotifications"
        },
        "EmployeeExitFormLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeExitFormLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeExitForm": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeExitFormLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiExitDashform": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/exit-form",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeExitForm"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeExitForm"
        },
        "ExpenseSubmitLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseSubmitLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseSubmit": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseSubmitLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiExpense": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/expense",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseSubmit"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseSubmit"
        },
        "ExpenseApproveLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseApproveLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseApprove": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseApproveLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/expense/{refNo}/approve",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseApprove"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseApprove"
        },
        "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseAccountsUpdateLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseAccountsUpdate": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseAccountsUpdateLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/expense/{refNo}/accounts",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
        },
        "GetAllExpensesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllExpensesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllExpenses": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllExpensesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiExpenses": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/expenses",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllExpenses"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllExpenses"
        },
        "GetApprovedExpensesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetApprovedExpensesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetApprovedExpenses": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetApprovedExpensesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiExpensesApproved": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/expenses/approved",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetApprovedExpenses"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
        },
        "NotificationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Notifications",
            "AttributeDefinitions": [
              {
                "AttributeName": "notificationId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "notificationId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
          }
        },
        "HomeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HomeLambdaVersionTEcCbNpF3IAab1jRv62PxSrygyRXRzerwK5F1Ft92w"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
          }
        },
        "GetAllEmployeesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllEmployeesLambdaVersionu8Td0jp76HZb5bBg7MKbGuhciEarel0ZTh6WW5TZBvA"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
          }
        },
        "GetLeaveDataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetLeaveDataLambdaVersiont2qOyESwbRDTCQxcIZAf6OdGURG5uhzJfPuRVzqRDU"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
          }
        },
        "ApplyLeaveLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApplyLeaveLambdaVersionW5AfaFIJvy9PCOU4ghCcVJPxPMJw1I5kIRhjwkPMc"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeEvaluationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeEvaluationLambdaVersionwedOWC0TTGFNx0nku4iVrK86nfjWJvSCxGwiWesjSQ"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeStatisticsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeStatisticsLambdaVersionKaZLu21jPxdWLmiujKbXtBlH1TRb8g0hmQcNH35rTs"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
          }
        },
        "RegisterEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RegisterEmployeeLambdaVersionwN4cJKMcyjwH128pArJPZjK7KguFPqOUGPUdbmdME"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeLoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeLoginLambdaVersionU7yUsMkIZlF0OpLutsqafXTfGN6wFzAFKDoXSc"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeLogoutLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeLogoutLambdaVersionSoDukLHeaAp4HKRlrkedgRceUha6UiscNQIyOwL4"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
          }
        },
        "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
        "UpdateEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateEmployeeLambdaVersionmus73SMWYXb2wsg3cgZQDN7IVSgd2Bs9ynshGcfAnEM"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "ManagerNotificationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ManagerNotificationsLambdaVersionLuIZY0mlyyHRINwevIBdKFdonksU4FlDbTLBF6NtfI0"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
          }
        },
        "HandleNotificationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HandleNotificationsLambdaVersionpjq97q2TP03MpdUFfL7cqXQL7KcwlXqRwgoKBtusnk"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeExitFormLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeExitFormLambdaVersionFvGDaGzm6zoldHcvsfWKeobTpoDPo32sk22leGQ9MWw"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseSubmitLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseSubmitLambdaVersion1lV76QeFrbZZgJsanM1k47eOJnhwYxBhC0QV8g87Yg"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseApproveLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseApproveLambdaVersionFachSEKCJzy67Yd5blvupkhryiJl1p1PJNUTVtEw"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseAccountsUpdateLambdaVersionliiBO8Glxc0px2JWslrPALRmGwXVClAKDByoiD8kEc"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
          }
        },
        "GetAllExpensesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllExpensesLambdaVersionEmmKPUjU9WYgmXTTrOEdEC1mDtTNP1NRDy9AvLmO8IU"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
          }
        },
        "GetApprovedExpensesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetApprovedExpensesLambdaVersionu0L8jWL5LhDZjCMQvXQ9hqtI3i2s2D91tVxCWZ74E"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}