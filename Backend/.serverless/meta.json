{
  "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\serverless.yml": {
    "versionFramework": "4.14.3",
    "servicePath": "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "developer4568",
      "service": "enterprise-resource-planning",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "ap-south-1",
        "timeout": 30,
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH"
            ],
            "maxAge": 86400
          }
        },
        "environment": {
          "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
          "JWT_SECRET": "<REDACTED>",
          "EMAIL_USER": "internal@amergingtech.com",
          "EMAIL_PASSWORD": "<REDACTED>",
          "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "HomeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
              }
            },
            "ProjectFormLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-projectForm"
              }
            },
            "GetAllEmployeesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
              }
            },
            "GetAllEmpCredentialsLogGroup": "<REDACTED>",
            "SendOtpHandlerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendOtpHandler"
              }
            },
            "VerifyOtpHandlerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-verifyOtpHandler"
              }
            },
            "ForgotPasswordHandlerLogGroup": "<REDACTED>",
            "TourExpenseFormLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tourExpenseForm"
              }
            },
            "GetTourExpenseLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getTourExpense"
              }
            },
            "UpdateTourExpenseLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpense"
              }
            },
            "UpdateTourExpenseAccountsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpenseAccounts"
              }
            },
            "GetLeaveDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
              }
            },
            "EmailFormatLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-emailFormat"
              }
            },
            "ApplyLeaveLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
              }
            },
            "EmployeeEvaluationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
              }
            },
            "EmpMailCredentialsLogGroup": "<REDACTED>",
            "EmployeeStatisticsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
              }
            },
            "GetMasterDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getMasterData"
              }
            },
            "UpdateMasterDataLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateMasterData"
              }
            },
            "RegisterEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
              }
            },
            "EmployeeLoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
              }
            },
            "EmployeeLogoutLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
              }
            },
            "TokenVerifyLogGroup": "<REDACTED>",
            "LeadformLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-leadform"
              }
            },
            "GetClientDetailsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getClientDetails"
              }
            },
            "UpdateEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
              }
            },
            "ManagerNotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
              }
            },
            "HandleNotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
              }
            },
            "EmployeeExitFormLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
              }
            },
            "ExpenseSubmitLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
              }
            },
            "ExpenseApproveLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
              }
            },
            "ExpenseAccountsUpdateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
              }
            },
            "UpdateEmployeeDetailsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
              }
            },
            "GetEmployeeEidLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
              }
            },
            "GetAllExpensesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
              }
            },
            "GetApprovedExpensesLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
              }
            },
            "GetExpensebyIDLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getExpensebyID"
              }
            },
            "UpdateExpenseIDLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateExpenseID"
              }
            },
            "DeleteEmployeeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-deleteEmployee"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "enterprise-resource-planning",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "enterprise-resource-planning",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "HomeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-home",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HomeLogGroup"
              ]
            },
            "ProjectFormLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-projectForm",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ProjectFormLogGroup"
              ]
            },
            "GetAllEmployeesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllEmployeesLogGroup"
              ]
            },
            "GetAllEmpCredentialsLambdaFunction": "<REDACTED>",
            "SendOtpHandlerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-sendOtpHandler",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SendOtpHandlerLogGroup"
              ]
            },
            "VerifyOtpHandlerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-verifyOtpHandler",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "VerifyOtpHandlerLogGroup"
              ]
            },
            "ForgotPasswordHandlerLambdaFunction": "<REDACTED>",
            "TourExpenseFormLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-tourExpenseForm",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "TourExpenseFormLogGroup"
              ]
            },
            "GetTourExpenseLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getTourExpense",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetTourExpenseLogGroup"
              ]
            },
            "UpdateTourExpenseLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateTourExpense",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateTourExpenseLogGroup"
              ]
            },
            "UpdateTourExpenseAccountsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateTourExpenseAccounts",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateTourExpenseAccountsLogGroup"
              ]
            },
            "GetLeaveDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetLeaveDataLogGroup"
              ]
            },
            "EmailFormatLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/Notification/routes/empCredentialsRoute.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-emailFormat",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmailFormatLogGroup"
              ]
            },
            "ApplyLeaveLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-applyLeave",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ApplyLeaveLogGroup"
              ]
            },
            "EmployeeEvaluationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeEvaluationLogGroup"
              ]
            },
            "EmpMailCredentialsLambdaFunction": "<REDACTED>",
            "EmployeeStatisticsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeStatisticsLogGroup"
              ]
            },
            "GetMasterDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getMasterData",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMasterDataLogGroup"
              ]
            },
            "UpdateMasterDataLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateMasterData",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateMasterDataLogGroup"
              ]
            },
            "RegisterEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterEmployeeLogGroup"
              ]
            },
            "EmployeeLoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeLoginLogGroup"
              ]
            },
            "EmployeeLogoutLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeLogoutLogGroup"
              ]
            },
            "TokenVerifyLambdaFunction": "<REDACTED>",
            "LeadformLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-leadform",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LeadformLogGroup"
              ]
            },
            "GetClientDetailsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getClientDetails",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetClientDetailsLogGroup"
              ]
            },
            "UpdateEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEmployeeLogGroup"
              ]
            },
            "ManagerNotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ManagerNotificationsLogGroup"
              ]
            },
            "HandleNotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "HandleNotificationsLogGroup"
              ]
            },
            "EmployeeExitFormLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "EmployeeExitFormLogGroup"
              ]
            },
            "ExpenseSubmitLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseSubmitLogGroup"
              ]
            },
            "ExpenseApproveLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseApproveLogGroup"
              ]
            },
            "ExpenseAccountsUpdateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "ExpenseAccountsUpdateLogGroup"
              ]
            },
            "UpdateEmployeeDetailsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateEmployeeDetailsLogGroup"
              ]
            },
            "GetEmployeeEidLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetEmployeeEidLogGroup"
              ]
            },
            "GetAllExpensesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllExpensesLogGroup"
              ]
            },
            "GetApprovedExpensesLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetApprovedExpensesLogGroup"
              ]
            },
            "GetExpensebyIDLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-getExpensebyID",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetExpensebyIDLogGroup"
              ]
            },
            "UpdateExpenseIDLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-updateExpenseID",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateExpenseIDLogGroup"
              ]
            },
            "DeleteEmployeeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                  "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
                },
                "Handler": "src/routes/empMaster-route.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "enterprise-resource-planning-dev-deleteEmployee",
                "MemorySize": 1024,
                "Timeout": 30,
                "Environment": {
                  "Variables": {
                    "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                    "JWT_SECRET": "<REDACTED>",
                    "EMAIL_USER": "internal@amergingtech.com",
                    "EMAIL_PASSWORD": "<REDACTED>",
                    "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteEmployeeLogGroup"
              ]
            },
            "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HomeLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ProjectFormLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllEmployeesLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetAllEmpCredentialsLambdaVersionqKzlQujQzqXEoRuFiSlOEFHokJwfJWirn0zsPjAthY": "<REDACTED>",
            "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SendOtpHandlerLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "VerifyOtpHandlerLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ForgotPasswordHandlerLambdaVersionCni3FfAHEQBTMR6MxLsvdEmQ0LHq3TQxEMYE3das": "<REDACTED>",
            "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "TourExpenseFormLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetTourExpenseLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateTourExpenseLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateTourExpenseAccountsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetLeaveDataLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmailFormatLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ApplyLeaveLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeEvaluationLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmpMailCredentialsLambdaVersiona9l0cYGKaviVwAnk6uBn7vbXB1YoB2FHMHciHDUzoU": "<REDACTED>",
            "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeStatisticsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMasterDataLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateMasterDataLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterEmployeeLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeLoginLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeLogoutLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "TokenVerifyLambdaVersionxZPhB5E2lTvRyq6utQ7juekaBaA7ZS1S3PcxxMxE4": "<REDACTED>",
            "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LeadformLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetClientDetailsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEmployeeLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ManagerNotificationsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "HandleNotificationsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "EmployeeExitFormLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseSubmitLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseApproveLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "ExpenseAccountsUpdateLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateEmployeeDetailsLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetEmployeeEidLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllExpensesLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetApprovedExpensesLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetExpensebyIDLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateExpenseIDLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteEmployeeLambdaFunction"
                },
                "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-enterprise-resource-planning",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "PUT",
                    "DELETE",
                    "PATCH"
                  ],
                  "AllowOrigins": [
                    "*"
                  ],
                  "MaxAge": 86400
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "HomeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationHome": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "HomeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGet": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationHome"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationHome"
            },
            "ProjectFormLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ProjectFormLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationProjectForm": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ProjectFormLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiProjectDashform": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/project-form",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationProjectForm"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationProjectForm"
            },
            "GetAllEmployeesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllEmployees": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllEmployeesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetemp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/getemp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllEmployees"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllEmployees"
            },
            "GetAllEmpCredentialsLambdaPermissionHttpApi": "<REDACTED>",
            "HttpApiIntegrationGetAllEmpCredentials": "<REDACTED>",
            "HttpApiRouteGetApiEmpcredentials": "<REDACTED>",
            "SendOtpHandlerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SendOtpHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSendOtpHandler": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SendOtpHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiAuthSendDashotp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/auth/send-otp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSendOtpHandler"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSendOtpHandler"
            },
            "VerifyOtpHandlerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "VerifyOtpHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationVerifyOtpHandler": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "VerifyOtpHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiAuthVerifyDashotp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/auth/verify-otp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationVerifyOtpHandler"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationVerifyOtpHandler"
            },
            "ForgotPasswordHandlerLambdaPermissionHttpApi": "<REDACTED>",
            "HttpApiIntegrationForgotPasswordHandler": "<REDACTED>",
            "HttpApiRoutePatchApiAuthResetDashpassword": "<REDACTED>",
            "TourExpenseFormLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "TourExpenseFormLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationTourExpenseForm": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "TourExpenseFormLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiTourexpense": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/tourExpense",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationTourExpenseForm"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationTourExpenseForm"
            },
            "GetTourExpenseLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetTourExpenseLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetTourExpense": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetTourExpenseLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiTourexpensedata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/tourExpensedata",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetTourExpense"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetTourExpense"
            },
            "UpdateTourExpenseLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateTourExpenseLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateTourExpense": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateTourExpenseLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiTourexpenseExpenserefnoVarApprove": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/approve",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateTourExpense"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateTourExpense"
            },
            "UpdateTourExpenseAccountsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateTourExpenseAccountsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateTourExpenseAccounts": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateTourExpenseAccountsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiTourexpenseExpenserefnoVarAccounts": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/accounts",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateTourExpenseAccounts"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateTourExpenseAccounts"
            },
            "GetLeaveDataLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetLeaveDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetLeaveData": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetLeaveDataLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiLeaveDashdata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/leave-data",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetLeaveData"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetLeaveData"
            },
            "EmailFormatLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmailFormatLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmailFormat": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmailFormatLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmailformat": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/email_format",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmailFormat"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmailFormat"
            },
            "ApplyLeaveLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ApplyLeaveLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationApplyLeave": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ApplyLeaveLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiApplyDashleave": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/apply-leave",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationApplyLeave"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationApplyLeave"
            },
            "EmployeeEvaluationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeEvaluation": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeEvaluationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmployeeDashevaluation": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/employee-evaluation",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeEvaluation"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
            },
            "EmpMailCredentialsLambdaPermissionHttpApi": "<REDACTED>",
            "HttpApiIntegrationEmpMailCredentials": "<REDACTED>",
            "HttpApiRoutePostApiCredentials": "<REDACTED>",
            "EmployeeStatisticsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeStatisticsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeStatistics": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeStatisticsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiEmpStats": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/emp/stats",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeStatistics"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeStatistics"
            },
            "GetMasterDataLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMasterDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetMasterData": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetMasterDataLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetDashmasterDashdata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/get-master-data",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetMasterData"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetMasterData"
            },
            "UpdateMasterDataLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateMasterDataLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateMasterData": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateMasterDataLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiUpdateDashmasterDashdata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/update-master-data",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateMasterData"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateMasterData"
            },
            "RegisterEmployeeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationRegisterEmployee": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "RegisterEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiRegemp": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/regemp",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationRegisterEmployee"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationRegisterEmployee"
            },
            "EmployeeLoginLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeLogin": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeLoginLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmpLogin": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/emp/login",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeLogin"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeLogin"
            },
            "EmployeeLogoutLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeLogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeLogout": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeLogoutLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiEmpLogout": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/emp/logout",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeLogout"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeLogout"
            },
            "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
            "HttpApiIntegrationTokenVerify": "<REDACTED>",
            "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
            "LeadformLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LeadformLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationLeadform": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "LeadformLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiLeadDashform": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/lead-form",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationLeadform"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationLeadform"
            },
            "GetClientDetailsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetClientDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetClientDetails": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetClientDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiClientDashdata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/client-data",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetClientDetails"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetClientDetails"
            },
            "UpdateEmployeeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateEmployee": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiEmpEidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/emp/{eID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateEmployee"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateEmployee"
            },
            "ManagerNotificationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ManagerNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationManagerNotifications": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ManagerNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiNotificationsManager": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/notifications/manager",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationManagerNotifications"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationManagerNotifications"
            },
            "HandleNotificationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "HandleNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationHandleNotifications": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "HandleNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiNotificationsHandle": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/notifications/handle",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationHandleNotifications"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationHandleNotifications"
            },
            "EmployeeExitFormLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "EmployeeExitFormLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationEmployeeExitForm": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "EmployeeExitFormLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiExitDashform": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/exit-form",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationEmployeeExitForm"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationEmployeeExitForm"
            },
            "ExpenseSubmitLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseSubmitLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseSubmit": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseSubmitLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostApiExpense": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /api/expense",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseSubmit"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseSubmit"
            },
            "ExpenseApproveLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseApproveLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseApprove": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseApproveLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/expense/{refNo}/approve",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseApprove"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseApprove"
            },
            "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "ExpenseAccountsUpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationExpenseAccountsUpdate": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "ExpenseAccountsUpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/expense/{refNo}/accounts",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
            },
            "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateEmployeeDetails": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateEmployeeDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiUpdateDashempEidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/update-emp/{eID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
            },
            "GetEmployeeEidLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetEmployeeEidLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetEmployeeEid": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetEmployeeEidLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetDashempEidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/get-emp/{eID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetEmployeeEid"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetEmployeeEid"
            },
            "GetAllExpensesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllExpenses": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiExpenses": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/expenses",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllExpenses"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllExpenses"
            },
            "GetApprovedExpensesLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetApprovedExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetApprovedExpenses": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetApprovedExpensesLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiExpensesApproved": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/expenses/approved",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetApprovedExpenses"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
            },
            "GetExpensebyIDLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetExpensebyIDLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetExpensebyID": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetExpensebyIDLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetApiGetDashexpenseExpenseidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /api/get-expense/{expenseId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetExpensebyID"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetExpensebyID"
            },
            "UpdateExpenseIDLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateExpenseIDLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdateExpenseID": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateExpenseIDLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchApiUpdateDashexpenseExpenseidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /api/update-expense/{expenseId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdateExpenseID"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdateExpenseID"
            },
            "DeleteEmployeeLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDeleteEmployee": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteEmployeeLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteApiDeleteDashempEidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /api/delete-emp/{eID}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDeleteEmployee"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDeleteEmployee"
            },
            "NotificationsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Notifications",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "notificationId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "notificationId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
              }
            },
            "HomeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
              }
            },
            "ProjectFormLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
              }
            },
            "GetAllEmployeesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
              }
            },
            "GetAllEmpCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
            "SendOtpHandlerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
              }
            },
            "VerifyOtpHandlerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
              }
            },
            "ForgotPasswordHandlerLambdaFunctionQualifiedArn": "<REDACTED>",
            "TourExpenseFormLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-TourExpenseFormLambdaFunctionQualifiedArn"
              }
            },
            "GetTourExpenseLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetTourExpenseLambdaFunctionQualifiedArn"
              }
            },
            "UpdateTourExpenseLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseLambdaFunctionQualifiedArn"
              }
            },
            "UpdateTourExpenseAccountsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseAccountsLambdaFunctionQualifiedArn"
              }
            },
            "GetLeaveDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
              }
            },
            "EmailFormatLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
              }
            },
            "ApplyLeaveLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeEvaluationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
              }
            },
            "EmpMailCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
            "EmployeeStatisticsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
              }
            },
            "GetMasterDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
              }
            },
            "UpdateMasterDataLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
              }
            },
            "RegisterEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeLoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeLogoutLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
              }
            },
            "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
            "LeadformLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
              }
            },
            "GetClientDetailsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetClientDetailsLambdaFunctionQualifiedArn"
              }
            },
            "UpdateEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "ManagerNotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
              }
            },
            "HandleNotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
              }
            },
            "EmployeeExitFormLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseSubmitLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseApproveLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
              }
            },
            "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
              }
            },
            "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
              }
            },
            "GetEmployeeEidLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
              }
            },
            "GetAllExpensesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
              }
            },
            "GetApprovedExpensesLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
              }
            },
            "GetExpensebyIDLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
              }
            },
            "UpdateExpenseIDLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
              }
            },
            "DeleteEmployeeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "home": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/"
            }
          ],
          "name": "enterprise-resource-planning-dev-home",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo"
        },
        "projectForm": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/project-form",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/project-form"
            }
          ],
          "name": "enterprise-resource-planning-dev-projectForm",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8"
        },
        "getAllEmployees": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/getemp",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/getemp"
            }
          ],
          "name": "enterprise-resource-planning-dev-getAllEmployees",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI"
        },
        "getAllEmpCredentials": "<REDACTED>",
        "sendOtpHandler": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/auth/send-otp",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/auth/send-otp"
            }
          ],
          "name": "enterprise-resource-planning-dev-sendOtpHandler",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q"
        },
        "verifyOtpHandler": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/auth/verify-otp",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/auth/verify-otp"
            }
          ],
          "name": "enterprise-resource-planning-dev-verifyOtpHandler",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM"
        },
        "forgotPasswordHandler": "<REDACTED>",
        "tourExpenseForm": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/tourExpense",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/tourExpense"
            }
          ],
          "name": "enterprise-resource-planning-dev-tourExpenseForm",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA"
        },
        "getTourExpense": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/tourExpensedata",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/tourExpensedata"
            }
          ],
          "name": "enterprise-resource-planning-dev-getTourExpense",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I"
        },
        "updateTourExpense": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/tourExpense/{expenseRefNo}/approve",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/tourExpense/{expenseRefNo}/approve"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateTourExpense",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU"
        },
        "updateTourExpenseAccounts": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/tourExpense/{expenseRefNo}/accounts",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/tourExpense/{expenseRefNo}/accounts"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateTourExpenseAccounts",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc"
        },
        "getLeaveData": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/leave-data",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/leave-data"
            }
          ],
          "name": "enterprise-resource-planning-dev-getLeaveData",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA"
        },
        "emailFormat": {
          "handler": "src/Notification/routes/empCredentialsRoute.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/email_format",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/email_format"
            }
          ],
          "name": "enterprise-resource-planning-dev-emailFormat",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q"
        },
        "applyLeave": {
          "handler": "src/routes/empMaster-route.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/api/apply-leave",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/apply-leave"
            }
          ],
          "name": "enterprise-resource-planning-dev-applyLeave",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM"
        },
        "employeeEvaluation": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/employee-evaluation",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/employee-evaluation"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeEvaluation",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c"
        },
        "empMailCredentials": "<REDACTED>",
        "employeeStatistics": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/stats",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/emp/stats"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeStatistics",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ"
        },
        "getMasterData": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/get-master-data",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/get-master-data"
            }
          ],
          "name": "enterprise-resource-planning-dev-getMasterData",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts"
        },
        "updateMasterData": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/update-master-data",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/update-master-data"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateMasterData",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ"
        },
        "registerEmployee": {
          "handler": "src/routes/empMaster-route.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/api/regemp",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/regemp"
            }
          ],
          "name": "enterprise-resource-planning-dev-registerEmployee",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg"
        },
        "employeeLogin": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/login",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/emp/login"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeLogin",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA"
        },
        "employeeLogout": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/logout",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/emp/logout"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeLogout",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI"
        },
        "tokenVerify": "<REDACTED>",
        "leadform": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/lead-form",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/lead-form"
            }
          ],
          "name": "enterprise-resource-planning-dev-leadform",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o"
        },
        "getClientDetails": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/client-data",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/client-data"
            }
          ],
          "name": "enterprise-resource-planning-dev-getClientDetails",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664"
        },
        "updateEmployee": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/emp/{eID}",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/emp/{eID}"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA"
        },
        "managerNotifications": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/notifications/manager",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/notifications/manager"
            }
          ],
          "name": "enterprise-resource-planning-dev-managerNotifications",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s"
        },
        "handleNotifications": {
          "handler": "src/routes/empMaster-route.handler",
          "timeout": 30,
          "events": [
            {
              "httpApi": {
                "path": "/api/notifications/handle",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/notifications/handle"
            }
          ],
          "name": "enterprise-resource-planning-dev-handleNotifications",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ"
        },
        "employeeExitForm": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/exit-form",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/exit-form"
            }
          ],
          "name": "enterprise-resource-planning-dev-employeeExitForm",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4"
        },
        "expenseSubmit": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense",
                "method": "POST"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/api/expense"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseSubmit",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY"
        },
        "expenseApprove": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense/{refNo}/approve",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/expense/{refNo}/approve"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseApprove",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M"
        },
        "expenseAccountsUpdate": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expense/{refNo}/accounts",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/expense/{refNo}/accounts"
            }
          ],
          "name": "enterprise-resource-planning-dev-expenseAccountsUpdate",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8"
        },
        "updateEmployeeDetails": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/update-emp/{eID}",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/update-emp/{eID}"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateEmployeeDetails",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI"
        },
        "getEmployeeEid": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/get-emp/{eID}",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/get-emp/{eID}"
            }
          ],
          "name": "enterprise-resource-planning-dev-getEmployeeEid",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM"
        },
        "getAllExpenses": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expenses",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/expenses"
            }
          ],
          "name": "enterprise-resource-planning-dev-getAllExpenses",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4"
        },
        "getApprovedExpenses": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/expenses/approved",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/expenses/approved"
            }
          ],
          "name": "enterprise-resource-planning-dev-getApprovedExpenses",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54"
        },
        "getExpensebyID": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/get-expense/{expenseId}",
                "method": "GET"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/api/get-expense/{expenseId}"
            }
          ],
          "name": "enterprise-resource-planning-dev-getExpensebyID",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg"
        },
        "updateExpenseID": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/update-expense/{expenseId}",
                "method": "PATCH"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/api/update-expense/{expenseId}"
            }
          ],
          "name": "enterprise-resource-planning-dev-updateExpenseID",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4"
        },
        "deleteEmployee": {
          "handler": "src/routes/empMaster-route.handler",
          "events": [
            {
              "httpApi": {
                "path": "/api/delete-emp/{eID}",
                "method": "DELETE"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/api/delete-emp/{eID}"
            }
          ],
          "name": "enterprise-resource-planning-dev-deleteEmployee",
          "package": {},
          "memory": 1024,
          "timeout": 30,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4"
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "resources": {
        "Resources": {
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      },
      "custom": {
        "serverless-offline": {
          "httpPort": 3000
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-south-1",
      "timeout": 30,
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "maxAge": 86400
        }
      },
      "environment": {
        "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
        "JWT_SECRET": "<REDACTED>",
        "EMAIL_USER": "internal@amergingtech.com",
        "EMAIL_PASSWORD": "<REDACTED>",
        "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
            }
          },
          "ProjectFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-projectForm"
            }
          },
          "GetAllEmployeesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
            }
          },
          "GetAllEmpCredentialsLogGroup": "<REDACTED>",
          "SendOtpHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendOtpHandler"
            }
          },
          "VerifyOtpHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-verifyOtpHandler"
            }
          },
          "ForgotPasswordHandlerLogGroup": "<REDACTED>",
          "TourExpenseFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tourExpenseForm"
            }
          },
          "GetTourExpenseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getTourExpense"
            }
          },
          "UpdateTourExpenseLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpense"
            }
          },
          "UpdateTourExpenseAccountsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpenseAccounts"
            }
          },
          "GetLeaveDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
            }
          },
          "EmailFormatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-emailFormat"
            }
          },
          "ApplyLeaveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
            }
          },
          "EmployeeEvaluationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
            }
          },
          "EmpMailCredentialsLogGroup": "<REDACTED>",
          "EmployeeStatisticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
            }
          },
          "GetMasterDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getMasterData"
            }
          },
          "UpdateMasterDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateMasterData"
            }
          },
          "RegisterEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
            }
          },
          "EmployeeLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
            }
          },
          "EmployeeLogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
            }
          },
          "TokenVerifyLogGroup": "<REDACTED>",
          "LeadformLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-leadform"
            }
          },
          "GetClientDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getClientDetails"
            }
          },
          "UpdateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
            }
          },
          "ManagerNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
            }
          },
          "HandleNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
            }
          },
          "EmployeeExitFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
            }
          },
          "ExpenseSubmitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
            }
          },
          "ExpenseApproveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
            }
          },
          "ExpenseAccountsUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
            }
          },
          "UpdateEmployeeDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
            }
          },
          "GetEmployeeEidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
            }
          },
          "GetAllExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
            }
          },
          "GetApprovedExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
            }
          },
          "GetExpensebyIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getExpensebyID"
            }
          },
          "UpdateExpenseIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateExpenseID"
            }
          },
          "DeleteEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-deleteEmployee"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "enterprise-resource-planning",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "enterprise-resource-planning",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-home",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "ProjectFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-projectForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProjectFormLogGroup"
            ]
          },
          "GetAllEmployeesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllEmployeesLogGroup"
            ]
          },
          "GetAllEmpCredentialsLambdaFunction": "<REDACTED>",
          "SendOtpHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-sendOtpHandler",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendOtpHandlerLogGroup"
            ]
          },
          "VerifyOtpHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-verifyOtpHandler",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyOtpHandlerLogGroup"
            ]
          },
          "ForgotPasswordHandlerLambdaFunction": "<REDACTED>",
          "TourExpenseFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-tourExpenseForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TourExpenseFormLogGroup"
            ]
          },
          "GetTourExpenseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getTourExpense",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTourExpenseLogGroup"
            ]
          },
          "UpdateTourExpenseLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateTourExpense",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTourExpenseLogGroup"
            ]
          },
          "UpdateTourExpenseAccountsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateTourExpenseAccounts",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateTourExpenseAccountsLogGroup"
            ]
          },
          "GetLeaveDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaveDataLogGroup"
            ]
          },
          "EmailFormatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-emailFormat",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmailFormatLogGroup"
            ]
          },
          "ApplyLeaveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-applyLeave",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApplyLeaveLogGroup"
            ]
          },
          "EmployeeEvaluationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeEvaluationLogGroup"
            ]
          },
          "EmpMailCredentialsLambdaFunction": "<REDACTED>",
          "EmployeeStatisticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeStatisticsLogGroup"
            ]
          },
          "GetMasterDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getMasterData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMasterDataLogGroup"
            ]
          },
          "UpdateMasterDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateMasterData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateMasterDataLogGroup"
            ]
          },
          "RegisterEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterEmployeeLogGroup"
            ]
          },
          "EmployeeLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLoginLogGroup"
            ]
          },
          "EmployeeLogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLogoutLogGroup"
            ]
          },
          "TokenVerifyLambdaFunction": "<REDACTED>",
          "LeadformLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-leadform",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LeadformLogGroup"
            ]
          },
          "GetClientDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getClientDetails",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetClientDetailsLogGroup"
            ]
          },
          "UpdateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeLogGroup"
            ]
          },
          "ManagerNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ManagerNotificationsLogGroup"
            ]
          },
          "HandleNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleNotificationsLogGroup"
            ]
          },
          "EmployeeExitFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeExitFormLogGroup"
            ]
          },
          "ExpenseSubmitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseSubmitLogGroup"
            ]
          },
          "ExpenseApproveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseApproveLogGroup"
            ]
          },
          "ExpenseAccountsUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseAccountsUpdateLogGroup"
            ]
          },
          "UpdateEmployeeDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeDetailsLogGroup"
            ]
          },
          "GetEmployeeEidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmployeeEidLogGroup"
            ]
          },
          "GetAllExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllExpensesLogGroup"
            ]
          },
          "GetApprovedExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetApprovedExpensesLogGroup"
            ]
          },
          "GetExpensebyIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getExpensebyID",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetExpensebyIDLogGroup"
            ]
          },
          "UpdateExpenseIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateExpenseID",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateExpenseIDLogGroup"
            ]
          },
          "DeleteEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-deleteEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "<REDACTED>",
                  "EMAIL_USER": "internal@amergingtech.com",
                  "EMAIL_PASSWORD": "<REDACTED>",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEmployeeLogGroup"
            ]
          },
          "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProjectFormLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllEmployeesLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetAllEmpCredentialsLambdaVersionqKzlQujQzqXEoRuFiSlOEFHokJwfJWirn0zsPjAthY": "<REDACTED>",
          "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOtpHandlerLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyOtpHandlerLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ForgotPasswordHandlerLambdaVersionCni3FfAHEQBTMR6MxLsvdEmQ0LHq3TQxEMYE3das": "<REDACTED>",
          "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TourExpenseFormLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTourExpenseLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTourExpenseLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateTourExpenseAccountsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaveDataLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmailFormatLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApplyLeaveLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeEvaluationLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmpMailCredentialsLambdaVersiona9l0cYGKaviVwAnk6uBn7vbXB1YoB2FHMHciHDUzoU": "<REDACTED>",
          "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeStatisticsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMasterDataLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateMasterDataLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterEmployeeLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLoginLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLogoutLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "TokenVerifyLambdaVersionxZPhB5E2lTvRyq6utQ7juekaBaA7ZS1S3PcxxMxE4": "<REDACTED>",
          "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LeadformLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetClientDetailsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ManagerNotificationsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleNotificationsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeExitFormLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseSubmitLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseApproveLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseAccountsUpdateLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeDetailsLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmployeeEidLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllExpensesLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetApprovedExpensesLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetExpensebyIDLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateExpenseIDLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEmployeeLambdaFunction"
              },
              "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-enterprise-resource-planning",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "AllowOrigins": [
                  "*"
                ],
                "MaxAge": 86400
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HomeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHome": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHome"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHome"
          },
          "ProjectFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProjectFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationProjectForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ProjectFormLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiProjectDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/project-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationProjectForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationProjectForm"
          },
          "GetAllEmployeesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllEmployees": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllEmployees"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllEmployees"
          },
          "GetAllEmpCredentialsLambdaPermissionHttpApi": "<REDACTED>",
          "HttpApiIntegrationGetAllEmpCredentials": "<REDACTED>",
          "HttpApiRouteGetApiEmpcredentials": "<REDACTED>",
          "SendOtpHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendOtpHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "SendOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiAuthSendDashotp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/auth/send-otp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendOtpHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendOtpHandler"
          },
          "VerifyOtpHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationVerifyOtpHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "VerifyOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiAuthVerifyDashotp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/auth/verify-otp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVerifyOtpHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVerifyOtpHandler"
          },
          "ForgotPasswordHandlerLambdaPermissionHttpApi": "<REDACTED>",
          "HttpApiIntegrationForgotPasswordHandler": "<REDACTED>",
          "HttpApiRoutePatchApiAuthResetDashpassword": "<REDACTED>",
          "TourExpenseFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TourExpenseFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationTourExpenseForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "TourExpenseFormLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiTourexpense": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/tourExpense",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationTourExpenseForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationTourExpenseForm"
          },
          "GetTourExpenseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTourExpenseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetTourExpense": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetTourExpenseLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiTourexpensedata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/tourExpensedata",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetTourExpense"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetTourExpense"
          },
          "UpdateTourExpenseLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTourExpenseLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTourExpense": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateTourExpenseLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiTourexpenseExpenserefnoVarApprove": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/approve",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTourExpense"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTourExpense"
          },
          "UpdateTourExpenseAccountsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateTourExpenseAccountsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateTourExpenseAccounts": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateTourExpenseAccountsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiTourexpenseExpenserefnoVarAccounts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/accounts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateTourExpenseAccounts"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateTourExpenseAccounts"
          },
          "GetLeaveDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetLeaveData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiLeaveDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/leave-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetLeaveData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetLeaveData"
          },
          "EmailFormatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmailFormatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmailFormat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmailFormatLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmailformat": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/email_format",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmailFormat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmailFormat"
          },
          "ApplyLeaveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApplyLeave": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiApplyDashleave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/apply-leave",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApplyLeave"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApplyLeave"
          },
          "EmployeeEvaluationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeEvaluation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmployeeDashevaluation": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/employee-evaluation",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeEvaluation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
          },
          "EmpMailCredentialsLambdaPermissionHttpApi": "<REDACTED>",
          "HttpApiIntegrationEmpMailCredentials": "<REDACTED>",
          "HttpApiRoutePostApiCredentials": "<REDACTED>",
          "EmployeeStatisticsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeStatistics": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiEmpStats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/emp/stats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeStatistics"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeStatistics"
          },
          "GetMasterDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMasterData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashmasterDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-master-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMasterData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMasterData"
          },
          "UpdateMasterDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateMasterData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashmasterDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-master-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateMasterData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateMasterData"
          },
          "RegisterEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiRegemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/regemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterEmployee"
          },
          "EmployeeLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogin"
          },
          "EmployeeLogoutLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogout": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogout"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogout"
          },
          "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
          "HttpApiIntegrationTokenVerify": "<REDACTED>",
          "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
          "LeadformLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LeadformLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLeadform": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "LeadformLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiLeadDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/lead-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLeadform"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLeadform"
          },
          "GetClientDetailsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetClientDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetClientDetails": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetClientDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiClientDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/client-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetClientDetails"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetClientDetails"
          },
          "UpdateEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiEmpEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployee"
          },
          "ManagerNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationManagerNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiNotificationsManager": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/notifications/manager",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationManagerNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationManagerNotifications"
          },
          "HandleNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHandleNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiNotificationsHandle": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/notifications/handle",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHandleNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHandleNotifications"
          },
          "EmployeeExitFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeExitForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExitDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/exit-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeExitForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeExitForm"
          },
          "ExpenseSubmitLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseSubmit": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExpense": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/expense",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseSubmit"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseSubmit"
          },
          "ExpenseApproveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseApprove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/approve",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseApprove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseApprove"
          },
          "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseAccountsUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/accounts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
          },
          "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployeeDetails": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateEmployeeDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
          },
          "GetEmployeeEidLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmployeeEidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEmployeeEid": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetEmployeeEidLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEmployeeEid"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEmployeeEid"
          },
          "GetAllExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpenses": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllExpenses"
          },
          "GetApprovedExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetApprovedExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpensesApproved": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses/approved",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetApprovedExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
          },
          "GetExpensebyIDLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetExpensebyIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetExpensebyID": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetExpensebyIDLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashexpenseExpenseidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-expense/{expenseId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetExpensebyID"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetExpensebyID"
          },
          "UpdateExpenseIDLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateExpenseIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateExpenseID": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateExpenseIDLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashexpenseExpenseidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-expense/{expenseId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateExpenseID"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateExpenseID"
          },
          "DeleteEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiDeleteDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/delete-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteEmployee"
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "ProjectFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmployeesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmpCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
          "SendOtpHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
            }
          },
          "VerifyOtpHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
            }
          },
          "ForgotPasswordHandlerLambdaFunctionQualifiedArn": "<REDACTED>",
          "TourExpenseFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-TourExpenseFormLambdaFunctionQualifiedArn"
            }
          },
          "GetTourExpenseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetTourExpenseLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTourExpenseLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseLambdaFunctionQualifiedArn"
            }
          },
          "UpdateTourExpenseAccountsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseAccountsLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaveDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
            }
          },
          "EmailFormatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
            }
          },
          "ApplyLeaveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeEvaluationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
            }
          },
          "EmpMailCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
          "EmployeeStatisticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
            }
          },
          "GetMasterDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
            }
          },
          "UpdateMasterDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
            }
          },
          "RegisterEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
            }
          },
          "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
          "LeadformLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
            }
          },
          "GetClientDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetClientDetailsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "ManagerNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "HandleNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeExitFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseSubmitLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseApproveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetEmployeeEidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
            }
          },
          "GetAllExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetApprovedExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetExpensebyIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
            }
          },
          "UpdateExpenseIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\norg: developer4568\r\nservice: enterprise-resource-planning # Name of your service/project\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs20.x\r\n  region: ap-south-1\r\n  timeout: 30\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedHeaders:\r\n        - Content-Type\r\n        - Authorization\r\n      allowedMethods:\r\n        - GET\r\n        - POST\r\n        - PUT\r\n        - DELETE\r\n        - PATCH\r\n      maxAge: 86400 # Cache preflight response for 24 hours\r\n  environment:\r\n    #MONGO_URI: mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/\r\n    MONGO_URI: mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/\r\n    JWT_SECRET: amergingtech5757\r\n    EMAIL_USER: internal@amergingtech.com\r\n    EMAIL_PASSWORD: braz dbta pjhm davx\r\n    ENCRYPTION_KEY: 9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a\r\n\r\nfunctions:\r\n  home:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /\r\n          method: GET\r\n\r\n  projectForm:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/project-form\r\n          method: POST\r\n\r\n  getAllEmployees:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/getemp\r\n          method: GET\r\n  getAllEmpCredentials:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp_credentials\r\n          method: GET\r\n\r\n  sendOtpHandler:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/auth/send-otp\r\n          method: POST\r\n\r\n  verifyOtpHandler:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/auth/verify-otp\r\n          method: POST\r\n\r\n  forgotPasswordHandler:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/auth/reset-password\r\n          method: PATCH\r\n\r\n  tourExpenseForm:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/tourExpense\r\n          method: POST\r\n\r\n  getTourExpense:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/tourExpensedata\r\n          method: GET\r\n\r\n  updateTourExpense:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/tourExpense/{expenseRefNo}/approve\r\n          method: PATCH\r\n\r\n  updateTourExpenseAccounts:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/tourExpense/{expenseRefNo}/accounts\r\n          method: PATCH\r\n\r\n  getLeaveData:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/leave-data\r\n          method: GET\r\n\r\n  emailFormat:\r\n    handler: src/Notification/routes/empCredentialsRoute.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/email_format\r\n          method: POST\r\n  applyLeave:\r\n    handler: src/routes/empMaster-route.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /api/apply-leave\r\n          method: POST\r\n\r\n  employeeEvaluation:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/employee-evaluation\r\n          method: POST\r\n  empMailCredentials:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/credentials\r\n          method: POST\r\n\r\n  employeeStatistics:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/stats\r\n          method: GET\r\n  getMasterData:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/get-master-data\r\n          method: GET\r\n\r\n  updateMasterData:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/update-master-data\r\n          method: PATCH\r\n\r\n  registerEmployee:\r\n    handler: src/routes/empMaster-route.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /api/regemp\r\n          method: POST\r\n\r\n  employeeLogin:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/login\r\n          method: POST\r\n\r\n  employeeLogout:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/logout\r\n          method: POST\r\n\r\n  tokenVerify:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/token/verify\r\n          method: POST\r\n\r\n  leadform:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/lead-form\r\n          method: POST\r\n\r\n  getClientDetails:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/client-data\r\n          method: GET\r\n\r\n  updateEmployee:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/emp/{eID}\r\n          method: PATCH\r\n\r\n  managerNotifications:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/notifications/manager\r\n          method: GET\r\n\r\n  handleNotifications:\r\n    handler: src/routes/empMaster-route.handler\r\n    timeout: 30\r\n    events:\r\n      - httpApi:\r\n          path: /api/notifications/handle\r\n          method: PATCH\r\n\r\n  employeeExitForm:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/exit-form\r\n          method: POST\r\n\r\n  expenseSubmit:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense\r\n          method: POST\r\n\r\n  expenseApprove:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense/{refNo}/approve\r\n          method: PATCH\r\n\r\n  expenseAccountsUpdate:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expense/{refNo}/accounts\r\n          method: PATCH\r\n\r\n  updateEmployeeDetails:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/update-emp/{eID}\r\n          method: PATCH\r\n  getEmployeeEid:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/get-emp/{eID}\r\n          method: GET\r\n\r\n  getAllExpenses:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expenses\r\n          method: GET\r\n\r\n  getApprovedExpenses:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/expenses/approved\r\n          method: GET\r\n  getExpensebyID:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/get-expense/{expenseId}\r\n          method: GET\r\n\r\n  updateExpenseID:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/update-expense/{expenseId}\r\n          method: PATCH\r\n\r\n  deleteEmployee:\r\n    handler: src/routes/empMaster-route.handler\r\n    events:\r\n      - httpApi:\r\n          path: /api/delete-emp/{eID}\r\n          method: DELETE\r\nplugins:\r\n  - serverless-offline\r\n\r\nresources:\r\n  Resources:\r\n    NotificationsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Notifications\r\n        AttributeDefinitions:\r\n          - AttributeName: notificationId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: notificationId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\ncustom:\r\n  serverless-offline:\r\n    httpPort: 3000\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "39c97180-ccce-4727-9ced-6991ccb34e01",
    "orgName": "developer4568",
    "userId": "7d9kqX7vMPt9c1rLFh",
    "userName": "developer4568",
    "serviceProviderAwsAccountId": "430118818238",
    "serviceProviderAwsCfStackName": "enterprise-resource-planning-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:ap-south-1:430118818238:stack/enterprise-resource-planning-dev/b9bb0340-edd6-11ef-a4f3-06ce201e4af5",
    "serviceProviderAwsCfStackCreated": "2025-02-18T08:59:56.751Z",
    "serviceProviderAwsCfStackUpdated": "2025-05-16T05:43:12.443Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetClientDetailsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getClientDetails:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetClientDetailsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmailFormatLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-emailFormat:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeStatisticsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeStatistics:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeEvaluationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeEvaluation:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HomeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-home:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseAccountsUpdateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseAccountsUpdate:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetTourExpenseLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getTourExpense:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetTourExpenseLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "kookgkrkvg",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-enterprise-resource-planning-dev-HttpApiId"
      },
      {
        "OutputKey": "UpdateEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateEmployee:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
        "ExportName": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://kookgkrkvg.execute-api.ap-south-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-enterprise-resource-planning-dev-HttpApiUrl"
      },
      {
        "OutputKey": "UpdateTourExpenseAccountsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateTourExpenseAccounts:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateTourExpenseAccountsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmpMailCredentialsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-empMailCredentials:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmpMailCredentialsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RegisterEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-registerEmployee:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LeadformLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-leadform:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateEmployeeDetailsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateEmployeeDetails:18",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TourExpenseFormLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-tourExpenseForm:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-TourExpenseFormLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "TokenVerifyLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-tokenVerify:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ForgotPasswordHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-forgotPasswordHandler:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ForgotPasswordHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "SendOtpHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-sendOtpHandler:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetEmployeeEidLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getEmployeeEid:16",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "VerifyOtpHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-verifyOtpHandler:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMasterDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getMasterData:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeLoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeLogin:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeLogoutLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeLogout:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetExpensebyIDLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getExpensebyID:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseApproveLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseApprove:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ProjectFormLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-projectForm:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateMasterDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateMasterData:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateTourExpenseLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateTourExpense:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateTourExpenseLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllEmployeesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getAllEmployees:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetApprovedExpensesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getApprovedExpenses:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ExpenseSubmitLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-expenseSubmit:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "EmployeeExitFormLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-employeeExitForm:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ManagerNotificationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-managerNotifications:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HandleNotificationsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-handleNotifications:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetLeaveDataLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getLeaveData:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ApplyLeaveLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-applyLeave:26",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllEmpCredentialsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getAllEmpCredentials:10",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetAllEmpCredentialsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateExpenseIDLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-updateExpenseID:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllExpensesLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-getAllExpenses:21",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteEmployeeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:ap-south-1:430118818238:function:enterprise-resource-planning-dev-deleteEmployee:13",
        "Description": "Current Lambda function version",
        "ExportName": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "HomeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
          }
        },
        "ProjectFormLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-projectForm"
          }
        },
        "GetAllEmployeesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
          }
        },
        "GetAllEmpCredentialsLogGroup": "<REDACTED>",
        "SendOtpHandlerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendOtpHandler"
          }
        },
        "VerifyOtpHandlerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-verifyOtpHandler"
          }
        },
        "ForgotPasswordHandlerLogGroup": "<REDACTED>",
        "TourExpenseFormLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tourExpenseForm"
          }
        },
        "GetTourExpenseLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getTourExpense"
          }
        },
        "UpdateTourExpenseLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpense"
          }
        },
        "UpdateTourExpenseAccountsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpenseAccounts"
          }
        },
        "GetLeaveDataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
          }
        },
        "EmailFormatLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-emailFormat"
          }
        },
        "ApplyLeaveLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
          }
        },
        "EmployeeEvaluationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
          }
        },
        "EmpMailCredentialsLogGroup": "<REDACTED>",
        "EmployeeStatisticsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
          }
        },
        "GetMasterDataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getMasterData"
          }
        },
        "UpdateMasterDataLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateMasterData"
          }
        },
        "RegisterEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
          }
        },
        "EmployeeLoginLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
          }
        },
        "EmployeeLogoutLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
          }
        },
        "TokenVerifyLogGroup": "<REDACTED>",
        "LeadformLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-leadform"
          }
        },
        "GetClientDetailsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getClientDetails"
          }
        },
        "UpdateEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
          }
        },
        "ManagerNotificationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
          }
        },
        "HandleNotificationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
          }
        },
        "EmployeeExitFormLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
          }
        },
        "ExpenseSubmitLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
          }
        },
        "ExpenseApproveLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
          }
        },
        "ExpenseAccountsUpdateLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
          }
        },
        "UpdateEmployeeDetailsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
          }
        },
        "GetEmployeeEidLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
          }
        },
        "GetAllExpensesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
          }
        },
        "GetApprovedExpensesLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
          }
        },
        "GetExpensebyIDLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getExpensebyID"
          }
        },
        "UpdateExpenseIDLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateExpenseID"
          }
        },
        "DeleteEmployeeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-deleteEmployee"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "enterprise-resource-planning",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "enterprise-resource-planning",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "HomeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-home",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HomeLogGroup"
          ]
        },
        "ProjectFormLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-projectForm",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ProjectFormLogGroup"
          ]
        },
        "GetAllEmployeesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllEmployeesLogGroup"
          ]
        },
        "GetAllEmpCredentialsLambdaFunction": "<REDACTED>",
        "SendOtpHandlerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-sendOtpHandler",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SendOtpHandlerLogGroup"
          ]
        },
        "VerifyOtpHandlerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-verifyOtpHandler",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "VerifyOtpHandlerLogGroup"
          ]
        },
        "ForgotPasswordHandlerLambdaFunction": "<REDACTED>",
        "TourExpenseFormLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-tourExpenseForm",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "TourExpenseFormLogGroup"
          ]
        },
        "GetTourExpenseLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getTourExpense",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetTourExpenseLogGroup"
          ]
        },
        "UpdateTourExpenseLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateTourExpense",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateTourExpenseLogGroup"
          ]
        },
        "UpdateTourExpenseAccountsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateTourExpenseAccounts",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateTourExpenseAccountsLogGroup"
          ]
        },
        "GetLeaveDataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetLeaveDataLogGroup"
          ]
        },
        "EmailFormatLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/Notification/routes/empCredentialsRoute.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-emailFormat",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmailFormatLogGroup"
          ]
        },
        "ApplyLeaveLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-applyLeave",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ApplyLeaveLogGroup"
          ]
        },
        "EmployeeEvaluationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeEvaluationLogGroup"
          ]
        },
        "EmpMailCredentialsLambdaFunction": "<REDACTED>",
        "EmployeeStatisticsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeStatisticsLogGroup"
          ]
        },
        "GetMasterDataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getMasterData",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetMasterDataLogGroup"
          ]
        },
        "UpdateMasterDataLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateMasterData",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateMasterDataLogGroup"
          ]
        },
        "RegisterEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "RegisterEmployeeLogGroup"
          ]
        },
        "EmployeeLoginLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeLoginLogGroup"
          ]
        },
        "EmployeeLogoutLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeLogoutLogGroup"
          ]
        },
        "TokenVerifyLambdaFunction": "<REDACTED>",
        "LeadformLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-leadform",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "LeadformLogGroup"
          ]
        },
        "GetClientDetailsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getClientDetails",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetClientDetailsLogGroup"
          ]
        },
        "UpdateEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateEmployeeLogGroup"
          ]
        },
        "ManagerNotificationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ManagerNotificationsLogGroup"
          ]
        },
        "HandleNotificationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "HandleNotificationsLogGroup"
          ]
        },
        "EmployeeExitFormLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "EmployeeExitFormLogGroup"
          ]
        },
        "ExpenseSubmitLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseSubmitLogGroup"
          ]
        },
        "ExpenseApproveLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseApproveLogGroup"
          ]
        },
        "ExpenseAccountsUpdateLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "ExpenseAccountsUpdateLogGroup"
          ]
        },
        "UpdateEmployeeDetailsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateEmployeeDetailsLogGroup"
          ]
        },
        "GetEmployeeEidLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetEmployeeEidLogGroup"
          ]
        },
        "GetAllExpensesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllExpensesLogGroup"
          ]
        },
        "GetApprovedExpensesLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetApprovedExpensesLogGroup"
          ]
        },
        "GetExpensebyIDLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-getExpensebyID",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetExpensebyIDLogGroup"
          ]
        },
        "UpdateExpenseIDLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-updateExpenseID",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateExpenseIDLogGroup"
          ]
        },
        "DeleteEmployeeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
              "S3Key": "serverless/enterprise-resource-planning/dev/1747652861081-2025-05-19T11:07:41.081Z/enterprise-resource-planning.zip"
            },
            "Handler": "src/routes/empMaster-route.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "enterprise-resource-planning-dev-deleteEmployee",
            "MemorySize": 1024,
            "Timeout": 30,
            "Environment": {
              "Variables": {
                "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                "JWT_SECRET": "<REDACTED>",
                "EMAIL_USER": "internal@amergingtech.com",
                "EMAIL_PASSWORD": "<REDACTED>",
                "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteEmployeeLogGroup"
          ]
        },
        "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HomeLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ProjectFormLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllEmployeesLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetAllEmpCredentialsLambdaVersionqKzlQujQzqXEoRuFiSlOEFHokJwfJWirn0zsPjAthY": "<REDACTED>",
        "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SendOtpHandlerLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "VerifyOtpHandlerLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ForgotPasswordHandlerLambdaVersionCni3FfAHEQBTMR6MxLsvdEmQ0LHq3TQxEMYE3das": "<REDACTED>",
        "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "TourExpenseFormLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetTourExpenseLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateTourExpenseLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateTourExpenseAccountsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetLeaveDataLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmailFormatLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ApplyLeaveLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeEvaluationLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmpMailCredentialsLambdaVersiona9l0cYGKaviVwAnk6uBn7vbXB1YoB2FHMHciHDUzoU": "<REDACTED>",
        "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeStatisticsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetMasterDataLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateMasterDataLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "RegisterEmployeeLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeLoginLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeLogoutLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "TokenVerifyLambdaVersionxZPhB5E2lTvRyq6utQ7juekaBaA7ZS1S3PcxxMxE4": "<REDACTED>",
        "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "LeadformLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetClientDetailsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateEmployeeLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ManagerNotificationsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "HandleNotificationsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "EmployeeExitFormLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseSubmitLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseApproveLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "ExpenseAccountsUpdateLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateEmployeeDetailsLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetEmployeeEidLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllExpensesLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetApprovedExpensesLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetExpensebyIDLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateExpenseIDLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteEmployeeLambdaFunction"
            },
            "CodeSha256": "fXCRuLEuRgsZqoAjZyRuIZFXEPsqS6+RuGJ5z8UiRLk="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-enterprise-resource-planning",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "Authorization"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "PUT",
                "DELETE",
                "PATCH"
              ],
              "AllowOrigins": [
                "*"
              ],
              "MaxAge": 86400
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "HomeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HomeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationHome": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "HomeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGet": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationHome"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationHome"
        },
        "ProjectFormLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ProjectFormLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationProjectForm": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ProjectFormLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiProjectDashform": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/project-form",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationProjectForm"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationProjectForm"
        },
        "GetAllEmployeesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllEmployeesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllEmployees": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllEmployeesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiGetemp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/getemp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllEmployees"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllEmployees"
        },
        "GetAllEmpCredentialsLambdaPermissionHttpApi": "<REDACTED>",
        "HttpApiIntegrationGetAllEmpCredentials": "<REDACTED>",
        "HttpApiRouteGetApiEmpcredentials": "<REDACTED>",
        "SendOtpHandlerLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SendOtpHandlerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationSendOtpHandler": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "SendOtpHandlerLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiAuthSendDashotp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/auth/send-otp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationSendOtpHandler"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationSendOtpHandler"
        },
        "VerifyOtpHandlerLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "VerifyOtpHandlerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationVerifyOtpHandler": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "VerifyOtpHandlerLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiAuthVerifyDashotp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/auth/verify-otp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationVerifyOtpHandler"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationVerifyOtpHandler"
        },
        "ForgotPasswordHandlerLambdaPermissionHttpApi": "<REDACTED>",
        "HttpApiIntegrationForgotPasswordHandler": "<REDACTED>",
        "HttpApiRoutePatchApiAuthResetDashpassword": "<REDACTED>",
        "TourExpenseFormLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "TourExpenseFormLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationTourExpenseForm": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "TourExpenseFormLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiTourexpense": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/tourExpense",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationTourExpenseForm"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationTourExpenseForm"
        },
        "GetTourExpenseLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetTourExpenseLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetTourExpense": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetTourExpenseLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiTourexpensedata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/tourExpensedata",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetTourExpense"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetTourExpense"
        },
        "UpdateTourExpenseLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateTourExpenseLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateTourExpense": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateTourExpenseLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiTourexpenseExpenserefnoVarApprove": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/approve",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateTourExpense"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateTourExpense"
        },
        "UpdateTourExpenseAccountsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateTourExpenseAccountsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateTourExpenseAccounts": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateTourExpenseAccountsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiTourexpenseExpenserefnoVarAccounts": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/accounts",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateTourExpenseAccounts"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateTourExpenseAccounts"
        },
        "GetLeaveDataLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetLeaveDataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetLeaveData": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetLeaveDataLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiLeaveDashdata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/leave-data",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetLeaveData"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetLeaveData"
        },
        "EmailFormatLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmailFormatLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmailFormat": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmailFormatLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmailformat": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/email_format",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmailFormat"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmailFormat"
        },
        "ApplyLeaveLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ApplyLeaveLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationApplyLeave": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ApplyLeaveLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiApplyDashleave": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/apply-leave",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationApplyLeave"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationApplyLeave"
        },
        "EmployeeEvaluationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeEvaluation": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeEvaluationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmployeeDashevaluation": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/employee-evaluation",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeEvaluation"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
        },
        "EmpMailCredentialsLambdaPermissionHttpApi": "<REDACTED>",
        "HttpApiIntegrationEmpMailCredentials": "<REDACTED>",
        "HttpApiRoutePostApiCredentials": "<REDACTED>",
        "EmployeeStatisticsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeStatisticsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeStatistics": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeStatisticsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiEmpStats": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/emp/stats",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeStatistics"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeStatistics"
        },
        "GetMasterDataLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetMasterDataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetMasterData": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetMasterDataLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiGetDashmasterDashdata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/get-master-data",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetMasterData"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetMasterData"
        },
        "UpdateMasterDataLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateMasterDataLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateMasterData": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateMasterDataLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiUpdateDashmasterDashdata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/update-master-data",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateMasterData"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateMasterData"
        },
        "RegisterEmployeeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RegisterEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationRegisterEmployee": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "RegisterEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiRegemp": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/regemp",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationRegisterEmployee"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationRegisterEmployee"
        },
        "EmployeeLoginLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeLoginLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeLogin": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeLoginLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmpLogin": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/emp/login",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeLogin"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeLogin"
        },
        "EmployeeLogoutLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeLogoutLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeLogout": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeLogoutLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiEmpLogout": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/emp/logout",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeLogout"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeLogout"
        },
        "TokenVerifyLambdaPermissionHttpApi": "<REDACTED>",
        "HttpApiIntegrationTokenVerify": "<REDACTED>",
        "HttpApiRoutePostApiTokenVerify": "<REDACTED>",
        "LeadformLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "LeadformLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationLeadform": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "LeadformLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiLeadDashform": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/lead-form",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationLeadform"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationLeadform"
        },
        "GetClientDetailsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetClientDetailsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetClientDetails": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetClientDetailsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiClientDashdata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/client-data",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetClientDetails"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetClientDetails"
        },
        "UpdateEmployeeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateEmployee": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiEmpEidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/emp/{eID}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateEmployee"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateEmployee"
        },
        "ManagerNotificationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ManagerNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationManagerNotifications": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ManagerNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiNotificationsManager": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/notifications/manager",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationManagerNotifications"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationManagerNotifications"
        },
        "HandleNotificationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "HandleNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationHandleNotifications": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "HandleNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiNotificationsHandle": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/notifications/handle",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationHandleNotifications"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationHandleNotifications"
        },
        "EmployeeExitFormLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "EmployeeExitFormLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationEmployeeExitForm": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "EmployeeExitFormLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiExitDashform": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/exit-form",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationEmployeeExitForm"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationEmployeeExitForm"
        },
        "ExpenseSubmitLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseSubmitLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseSubmit": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseSubmitLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostApiExpense": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /api/expense",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseSubmit"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseSubmit"
        },
        "ExpenseApproveLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseApproveLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseApprove": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseApproveLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/expense/{refNo}/approve",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseApprove"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseApprove"
        },
        "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "ExpenseAccountsUpdateLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationExpenseAccountsUpdate": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "ExpenseAccountsUpdateLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/expense/{refNo}/accounts",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
        },
        "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateEmployeeDetailsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateEmployeeDetails": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateEmployeeDetailsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiUpdateDashempEidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/update-emp/{eID}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
        },
        "GetEmployeeEidLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetEmployeeEidLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetEmployeeEid": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetEmployeeEidLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiGetDashempEidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/get-emp/{eID}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetEmployeeEid"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetEmployeeEid"
        },
        "GetAllExpensesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllExpensesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllExpenses": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllExpensesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiExpenses": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/expenses",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllExpenses"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllExpenses"
        },
        "GetApprovedExpensesLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetApprovedExpensesLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetApprovedExpenses": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetApprovedExpensesLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiExpensesApproved": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/expenses/approved",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetApprovedExpenses"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
        },
        "GetExpensebyIDLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetExpensebyIDLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetExpensebyID": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetExpensebyIDLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetApiGetDashexpenseExpenseidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /api/get-expense/{expenseId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetExpensebyID"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetExpensebyID"
        },
        "UpdateExpenseIDLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateExpenseIDLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdateExpenseID": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateExpenseIDLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchApiUpdateDashexpenseExpenseidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /api/update-expense/{expenseId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdateExpenseID"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdateExpenseID"
        },
        "DeleteEmployeeLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDeleteEmployee": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteEmployeeLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteApiDeleteDashempEidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /api/delete-emp/{eID}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDeleteEmployee"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDeleteEmployee"
        },
        "NotificationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Notifications",
            "AttributeDefinitions": [
              {
                "AttributeName": "notificationId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "notificationId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
          }
        },
        "HomeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HomeLambdaVersionfAe2rP5aPRQLLq1FiCimg1aD5cUZbWJLO8apv43fo"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
          }
        },
        "ProjectFormLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ProjectFormLambdaVersionbuFP45wcoxJpEeSxbErECIwhOcK2mHs4oeZijtgUu8"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
          }
        },
        "GetAllEmployeesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllEmployeesLambdaVersion1Sqs17QUl1pdwnO46MoAcCxy8fzJp3uiA2hmqShmLTI"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
          }
        },
        "GetAllEmpCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
        "SendOtpHandlerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SendOtpHandlerLambdaVersionrdGlbMisVMSAOc7N1ewWIAMF2LDsDOIgQ8tJsmglj2Q"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
          }
        },
        "VerifyOtpHandlerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "VerifyOtpHandlerLambdaVersion9iHeHkRf04tMV4VLZSiapj8LnXxcCGveVLiKz8yM"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
          }
        },
        "ForgotPasswordHandlerLambdaFunctionQualifiedArn": "<REDACTED>",
        "TourExpenseFormLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "TourExpenseFormLambdaVersionWfrqhVwtDHninlIKRQHVgYvfvGHBQXq6B6Klb1y6LA"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-TourExpenseFormLambdaFunctionQualifiedArn"
          }
        },
        "GetTourExpenseLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetTourExpenseLambdaVersioni41bN24pzgfUaERAdDoD8oW6Tzx0aYFSC8MJeEsl4I"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetTourExpenseLambdaFunctionQualifiedArn"
          }
        },
        "UpdateTourExpenseLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateTourExpenseLambdaVersionRmqXkiEiwA7YNDrAYg36gmQgP4DadPAQzkJFt5S3mU"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseLambdaFunctionQualifiedArn"
          }
        },
        "UpdateTourExpenseAccountsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateTourExpenseAccountsLambdaVersionri2xUkTalXfo0kdhVKXoTWFRADTuJVMU5Hzd89Bk7cc"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseAccountsLambdaFunctionQualifiedArn"
          }
        },
        "GetLeaveDataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetLeaveDataLambdaVersionkJSyw6BJiWLzO9IXzUiGCIxwfgeDIXcXOLMEgdfhA"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
          }
        },
        "EmailFormatLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmailFormatLambdaVersionJXX2tLMYWGX7lcDFjqFT94AdwyJ7LZa0TdI2KOG61Q"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
          }
        },
        "ApplyLeaveLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ApplyLeaveLambdaVersionv00eLHXR4Vn9lFlgzi0V1iS9w4N0SxVP5Rg4ftM"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeEvaluationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeEvaluationLambdaVersion2gifkx3BWbHlJzb2S92e1xEBULIdREUpFu1ZCyj0c"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
          }
        },
        "EmpMailCredentialsLambdaFunctionQualifiedArn": "<REDACTED>",
        "EmployeeStatisticsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeStatisticsLambdaVersionsMwciOPIU0z2VASU87T80Tt4fRTdkSlO2pZdmCCQ"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
          }
        },
        "GetMasterDataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetMasterDataLambdaVersionONInZsneATp1eYVSmq3Nebvx3K8vz76krdzzcFQ6ts"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
          }
        },
        "UpdateMasterDataLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateMasterDataLambdaVersion9Ta77E5NNnKobjqpc8CnIzegrnHaIue9peQf2fJtQ"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
          }
        },
        "RegisterEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "RegisterEmployeeLambdaVersionn9diSpmyJOKCfCak5LiSf0qYNTwRZ9rvP9PSINbNg"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeLoginLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeLoginLambdaVersions1l6I7ffhVGAkdEu6pa3nCRi5mCQflQOj3U9W3rmsA"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeLogoutLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeLogoutLambdaVersion4RmkPQmsoIzyN4mvDgSFpFK3f9Gyj7N5hgtC7IgI"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
          }
        },
        "TokenVerifyLambdaFunctionQualifiedArn": "<REDACTED>",
        "LeadformLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "LeadformLambdaVersionj1liOxbjk1o8A02nqhM5grJlFjZVdhkmImuJVMenz1o"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
          }
        },
        "GetClientDetailsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetClientDetailsLambdaVersiongZuCDu9oz5BZd5pelGjwKxRtjUrvwH3dmphIW664"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetClientDetailsLambdaFunctionQualifiedArn"
          }
        },
        "UpdateEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateEmployeeLambdaVersionRrKul7U9ZlSTsAHwK8jLd5lrDiYDgoePSG2r2haWA"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "ManagerNotificationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ManagerNotificationsLambdaVersion3wMkDhTTNp2gmzgbhYJuP3fHWJ4MOloxPyxcqy1kx2s"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
          }
        },
        "HandleNotificationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "HandleNotificationsLambdaVersionwZrzzkiTYBAeROPdOI52OoJTvqVjarKLrmbYxYQNoOQ"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
          }
        },
        "EmployeeExitFormLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "EmployeeExitFormLambdaVersionfwZkbr291IyCaY6xWOe2lDVplHtgQw8e6OJjh2icVr4"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseSubmitLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseSubmitLambdaVersion4DaZbZDW5OTR460vMFx5Sz9B1T86cU6ddAaDzIHS1yY"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseApproveLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseApproveLambdaVersionnwivcnNLgr2fsMwtxdfcOL0yCVslyumzHkK2KWh6U5M"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
          }
        },
        "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "ExpenseAccountsUpdateLambdaVersion65dloYRsGvivfD48Z906gZ30IcaPL1b2M2VRDn8"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
          }
        },
        "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateEmployeeDetailsLambdaVersionCSInEJKBuma5hewHIObh7nOrKhtZfKivMp9ZPDCIMI"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
          }
        },
        "GetEmployeeEidLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetEmployeeEidLambdaVersiondxDv7mUBpmatBs6SY2GmdiSpr5VNI3Ju9nj1MpVM"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
          }
        },
        "GetAllExpensesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllExpensesLambdaVersionkfkM7a9gbcnVmjmaXd3iCRuD6dx8RIPcEw1MVDi4"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
          }
        },
        "GetApprovedExpensesLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetApprovedExpensesLambdaVersionw1O1LDsBSjg3xFLfbnZtlPC0GFafI1bhxWGzy54"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
          }
        },
        "GetExpensebyIDLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetExpensebyIDLambdaVersionCvLHFpvbsz6hC9Gu6BfsxVRHny76n6w9kcZ1uvP2bg"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
          }
        },
        "UpdateExpenseIDLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateExpenseIDLambdaVersionZyAixRMmQulyv7jPIJzvtKaTS2mB9faAjnLhSF5BVe4"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
          }
        },
        "DeleteEmployeeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteEmployeeLambdaVersionH73whyDWG2hatkRJzrv2khLYttkLejkYDM0P4ITxO4"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}