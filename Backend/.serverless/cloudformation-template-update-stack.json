{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "HomeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
      }
    },
    "GetAllEmployeesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
      }
    },
    "GetLeaveDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
      }
    },
    "ApplyLeaveLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
      }
    },
    "EmployeeEvaluationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
      }
    },
    "EmployeeStatisticsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
      }
    },
    "RegisterEmployeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
      }
    },
    "EmployeeLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
      }
    },
    "EmployeeLogoutLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
      }
    },
    "TokenVerifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tokenVerify"
      }
    },
    "UpdateEmployeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
      }
    },
    "ManagerNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
      }
    },
    "HandleNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
      }
    },
    "EmployeeExitFormLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
      }
    },
    "ExpenseSubmitLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
      }
    },
    "ExpenseApproveLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
      }
    },
    "ExpenseAccountsUpdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
      }
    },
    "GetAllExpensesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
      }
    },
    "GetApprovedExpensesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "enterprise-resource-planning",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "enterprise-resource-planning",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HomeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-home",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HomeLogGroup"
      ]
    },
    "GetAllEmployeesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllEmployeesLogGroup"
      ]
    },
    "GetLeaveDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetLeaveDataLogGroup"
      ]
    },
    "ApplyLeaveLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-applyLeave",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApplyLeaveLogGroup"
      ]
    },
    "EmployeeEvaluationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeEvaluationLogGroup"
      ]
    },
    "EmployeeStatisticsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeStatisticsLogGroup"
      ]
    },
    "RegisterEmployeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterEmployeeLogGroup"
      ]
    },
    "EmployeeLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeLoginLogGroup"
      ]
    },
    "EmployeeLogoutLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeLogoutLogGroup"
      ]
    },
    "TokenVerifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-tokenVerify",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TokenVerifyLogGroup"
      ]
    },
    "UpdateEmployeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEmployeeLogGroup"
      ]
    },
    "ManagerNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ManagerNotificationsLogGroup"
      ]
    },
    "HandleNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleNotificationsLogGroup"
      ]
    },
    "EmployeeExitFormLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeExitFormLogGroup"
      ]
    },
    "ExpenseSubmitLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseSubmitLogGroup"
      ]
    },
    "ExpenseApproveLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseApproveLogGroup"
      ]
    },
    "ExpenseAccountsUpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseAccountsUpdateLogGroup"
      ]
    },
    "GetAllExpensesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllExpensesLogGroup"
      ]
    },
    "GetApprovedExpensesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1739255076126-2025-02-11T06:24:36.126Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "daksh4568thakur@gmail.com",
            "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetApprovedExpensesLogGroup"
      ]
    },
    "HomeLambdaVersionEvQdR2p8yK6EFjkLS2NOI7z13v5O4ijLcAUdjTEc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HomeLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "GetAllEmployeesLambdaVersionjssViiZj4mbrOIkyKgl1SMdH1J5d9C4Ke93siXGCYEU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllEmployeesLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "GetLeaveDataLambdaVersionKsJF2K0QblkRbkechw4GifAztGefyvcaZbBGAADOM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetLeaveDataLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "ApplyLeaveLambdaVersionGL7SP1v3fOw6QvWZHF3FkI8ocFt2hhfBrG1CP3vnJQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ApplyLeaveLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "EmployeeEvaluationLambdaVersionnq46RibANHRfxSm3eOBDtwu8JMYj3X2MBFdCyhlQ2U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeEvaluationLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "EmployeeStatisticsLambdaVersion9IZTfJHyGbGDcKsfW49V96yRSpG5GqupMTNaUrDk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeStatisticsLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "RegisterEmployeeLambdaVersionBloTTro6Y5Yu68MqBlGW3iM6Ymp72TjMCJXAfYtl7w": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterEmployeeLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "EmployeeLoginLambdaVersionsi5hO7VSQX4uqQpGyEBUMx7akDwZ0KbDSZ02dB3Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeLoginLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "EmployeeLogoutLambdaVersionJiZFX4DtWjaGVDLcBJG3oNdSDzSAtsLJou3MQAFhY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeLogoutLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "TokenVerifyLambdaVersionego2p947575YhU0h9XECx8o8QW5jQMoYokS6LS3EFg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TokenVerifyLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "UpdateEmployeeLambdaVersionHa1QllrnF2LLvIDDWz2QJHYOKkwvfjVx3T7xZq9tUA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEmployeeLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "ManagerNotificationsLambdaVersion5RpI9hFy9Py4gijywKlX7GtkmwWMIQUtAOBNAANTY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ManagerNotificationsLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "HandleNotificationsLambdaVersionfZKq3UE84P1vocaX46rAx7D7YD3fKloNIK0hDDwNZSo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleNotificationsLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "EmployeeExitFormLambdaVersionjFV1bpW0ltSrdXKrAwdIjSHtZjNsqBNtlbrvdAOp4vg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeExitFormLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "ExpenseSubmitLambdaVersionl3qY7VehUCN6FAJgJIlIBOa1mnlNRA0lnSyiQ91OCo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseSubmitLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "ExpenseApproveLambdaVersionhfTFTx1BsJRZFVnmKsQRXA2ldvbb7neh6VHq04soM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseApproveLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "ExpenseAccountsUpdateLambdaVersionHiigpIwczqA5MqkoALEifjMkA1uPZVWrS4ZWTZayVw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseAccountsUpdateLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "GetAllExpensesLambdaVersioneLa0VXc5aL4Ww9A2q6GtA3d3MLRVWSEBjnALE7gZM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllExpensesLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "GetApprovedExpensesLambdaVersion1gJhp7dD11y2OHhdd6WMzpU1f1V4MRn4U3GPoGLgk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetApprovedExpensesLambdaFunction"
        },
        "CodeSha256": "djzyaIoW5YCqXsAz0+HhDDM+0ncMAkHT6MydTMYFDZ8="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-enterprise-resource-planning",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "AllowOrigins": [
            "*"
          ],
          "MaxAge": 86400
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HomeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHome": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGet": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHome"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHome"
    },
    "GetAllEmployeesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllEmployeesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllEmployees": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllEmployeesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiGetemp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/getemp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllEmployees"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllEmployees"
    },
    "GetLeaveDataLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLeaveDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetLeaveData": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetLeaveDataLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiLeaveDashdata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/leave-data",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetLeaveData"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetLeaveData"
    },
    "ApplyLeaveLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ApplyLeaveLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationApplyLeave": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ApplyLeaveLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiApplyDashleave": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/apply-leave",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationApplyLeave"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationApplyLeave"
    },
    "EmployeeEvaluationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeEvaluationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeEvaluation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeEvaluationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmployeeDashevaluation": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/employee-evaluation",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeEvaluation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
    },
    "EmployeeStatisticsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeStatisticsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeStatistics": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeStatisticsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiEmpStats": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/emp/stats",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeStatistics"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeStatistics"
    },
    "RegisterEmployeeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegisterEmployee": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiRegemp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/regemp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegisterEmployee"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegisterEmployee"
    },
    "EmployeeLoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeLoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmpLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/emp/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeLogin"
    },
    "EmployeeLogoutLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeLogoutLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeLogout": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeLogoutLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmpLogout": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/emp/logout",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeLogout"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeLogout"
    },
    "TokenVerifyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenVerifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationTokenVerify": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "TokenVerifyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiTokenVerify": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/token/verify",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationTokenVerify"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationTokenVerify"
    },
    "UpdateEmployeeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEmployee": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiEmpEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/emp/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEmployee"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEmployee"
    },
    "ManagerNotificationsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ManagerNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationManagerNotifications": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ManagerNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiNotificationsManager": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/notifications/manager",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationManagerNotifications"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationManagerNotifications"
    },
    "HandleNotificationsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandleNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHandleNotifications": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HandleNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiNotificationsHandle": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/notifications/handle",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHandleNotifications"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHandleNotifications"
    },
    "EmployeeExitFormLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeExitFormLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeExitForm": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeExitFormLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiExitDashform": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/exit-form",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeExitForm"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeExitForm"
    },
    "ExpenseSubmitLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseSubmitLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseSubmit": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseSubmitLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiExpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/expense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseSubmit"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseSubmit"
    },
    "ExpenseApproveLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseApproveLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseApprove": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseApproveLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/expense/{refNo}/approve",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseApprove"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseApprove"
    },
    "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseAccountsUpdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseAccountsUpdate": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseAccountsUpdateLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/expense/{refNo}/accounts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
    },
    "GetAllExpensesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllExpensesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllExpenses": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllExpensesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiExpenses": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/expenses",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllExpenses"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllExpenses"
    },
    "GetApprovedExpensesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetApprovedExpensesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetApprovedExpenses": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetApprovedExpensesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiExpensesApproved": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/expenses/approved",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetApprovedExpenses"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
    },
    "NotificationsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Notifications",
        "AttributeDefinitions": [
          {
            "AttributeName": "notificationId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "notificationId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
      }
    },
    "HomeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HomeLambdaVersionEvQdR2p8yK6EFjkLS2NOI7z13v5O4ijLcAUdjTEc"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
      }
    },
    "GetAllEmployeesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllEmployeesLambdaVersionjssViiZj4mbrOIkyKgl1SMdH1J5d9C4Ke93siXGCYEU"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
      }
    },
    "GetLeaveDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetLeaveDataLambdaVersionKsJF2K0QblkRbkechw4GifAztGefyvcaZbBGAADOM"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
      }
    },
    "ApplyLeaveLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ApplyLeaveLambdaVersionGL7SP1v3fOw6QvWZHF3FkI8ocFt2hhfBrG1CP3vnJQ"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeEvaluationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeEvaluationLambdaVersionnq46RibANHRfxSm3eOBDtwu8JMYj3X2MBFdCyhlQ2U"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeStatisticsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeStatisticsLambdaVersion9IZTfJHyGbGDcKsfW49V96yRSpG5GqupMTNaUrDk"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
      }
    },
    "RegisterEmployeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterEmployeeLambdaVersionBloTTro6Y5Yu68MqBlGW3iM6Ymp72TjMCJXAfYtl7w"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeLoginLambdaVersionsi5hO7VSQX4uqQpGyEBUMx7akDwZ0KbDSZ02dB3Y"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeLogoutLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeLogoutLambdaVersionJiZFX4DtWjaGVDLcBJG3oNdSDzSAtsLJou3MQAFhY"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
      }
    },
    "TokenVerifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TokenVerifyLambdaVersionego2p947575YhU0h9XECx8o8QW5jQMoYokS6LS3EFg"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEmployeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEmployeeLambdaVersionHa1QllrnF2LLvIDDWz2QJHYOKkwvfjVx3T7xZq9tUA"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
      }
    },
    "ManagerNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ManagerNotificationsLambdaVersion5RpI9hFy9Py4gijywKlX7GtkmwWMIQUtAOBNAANTY"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
      }
    },
    "HandleNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleNotificationsLambdaVersionfZKq3UE84P1vocaX46rAx7D7YD3fKloNIK0hDDwNZSo"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeExitFormLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeExitFormLambdaVersionjFV1bpW0ltSrdXKrAwdIjSHtZjNsqBNtlbrvdAOp4vg"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseSubmitLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseSubmitLambdaVersionl3qY7VehUCN6FAJgJIlIBOa1mnlNRA0lnSyiQ91OCo"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseApproveLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseApproveLambdaVersionhfTFTx1BsJRZFVnmKsQRXA2ldvbb7neh6VHq04soM"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseAccountsUpdateLambdaVersionHiigpIwczqA5MqkoALEifjMkA1uPZVWrS4ZWTZayVw"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
      }
    },
    "GetAllExpensesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllExpensesLambdaVersioneLa0VXc5aL4Ww9A2q6GtA3d3MLRVWSEBjnALE7gZM"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
      }
    },
    "GetApprovedExpensesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetApprovedExpensesLambdaVersion1gJhp7dD11y2OHhdd6WMzpU1f1V4MRn4U3GPoGLgk"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
      }
    }
  }
}