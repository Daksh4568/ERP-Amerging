{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "HomeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
      }
    },
    "ProjectFormLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-projectForm"
      }
    },
    "GetAllEmployeesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
      }
    },
    "GetAllEmpCredentialsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmpCredentials"
      }
    },
    "SendOtpHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendOtpHandler"
      }
    },
    "VerifyOtpHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-verifyOtpHandler"
      }
    },
    "ForgotPasswordHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-forgotPasswordHandler"
      }
    },
    "TourExpenseFormLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tourExpenseForm"
      }
    },
    "GetTourExpenseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getTourExpense"
      }
    },
    "UpdateTourExpenseLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpense"
      }
    },
    "UpdateTourExpenseAccountsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateTourExpenseAccounts"
      }
    },
    "GetLeaveDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
      }
    },
    "EmailFormatLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-emailFormat"
      }
    },
    "ApplyLeaveLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
      }
    },
    "EmployeeEvaluationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
      }
    },
    "EmpMailCredentialsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-empMailCredentials"
      }
    },
    "EmployeeStatisticsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
      }
    },
    "GetMasterDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getMasterData"
      }
    },
    "UpdateMasterDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateMasterData"
      }
    },
    "RegisterEmployeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
      }
    },
    "EmployeeLoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
      }
    },
    "EmployeeLogoutLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
      }
    },
    "TokenVerifyLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tokenVerify"
      }
    },
    "LeadformLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-leadform"
      }
    },
    "GetClientDetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getClientDetails"
      }
    },
    "UpdateEmployeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
      }
    },
    "SendReinviteLinkLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendReinviteLink"
      }
    },
    "ManagerNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
      }
    },
    "HandleNotificationsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
      }
    },
    "EmployeeExitFormLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
      }
    },
    "ExpenseSubmitLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
      }
    },
    "ExpenseApproveLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
      }
    },
    "ExpenseAccountsUpdateLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
      }
    },
    "UpdateEmployeeDetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
      }
    },
    "GetEmployeeEidLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
      }
    },
    "GetAllExpensesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
      }
    },
    "GetApprovedExpensesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
      }
    },
    "GetExpensebyIDLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getExpensebyID"
      }
    },
    "UpdateExpenseIDLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateExpenseID"
      }
    },
    "DeleteEmployeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-deleteEmployee"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "enterprise-resource-planning",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "enterprise-resource-planning",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "HomeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-home",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HomeLogGroup"
      ]
    },
    "ProjectFormLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-projectForm",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProjectFormLogGroup"
      ]
    },
    "GetAllEmployeesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllEmployeesLogGroup"
      ]
    },
    "GetAllEmpCredentialsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getAllEmpCredentials",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllEmpCredentialsLogGroup"
      ]
    },
    "SendOtpHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-sendOtpHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendOtpHandlerLogGroup"
      ]
    },
    "VerifyOtpHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-verifyOtpHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "VerifyOtpHandlerLogGroup"
      ]
    },
    "ForgotPasswordHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-forgotPasswordHandler",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ForgotPasswordHandlerLogGroup"
      ]
    },
    "TourExpenseFormLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-tourExpenseForm",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TourExpenseFormLogGroup"
      ]
    },
    "GetTourExpenseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getTourExpense",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTourExpenseLogGroup"
      ]
    },
    "UpdateTourExpenseLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateTourExpense",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTourExpenseLogGroup"
      ]
    },
    "UpdateTourExpenseAccountsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateTourExpenseAccounts",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateTourExpenseAccountsLogGroup"
      ]
    },
    "GetLeaveDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetLeaveDataLogGroup"
      ]
    },
    "EmailFormatLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-emailFormat",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmailFormatLogGroup"
      ]
    },
    "ApplyLeaveLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-applyLeave",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ApplyLeaveLogGroup"
      ]
    },
    "EmployeeEvaluationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeEvaluationLogGroup"
      ]
    },
    "EmpMailCredentialsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-empMailCredentials",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmpMailCredentialsLogGroup"
      ]
    },
    "EmployeeStatisticsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeStatisticsLogGroup"
      ]
    },
    "GetMasterDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getMasterData",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMasterDataLogGroup"
      ]
    },
    "UpdateMasterDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateMasterData",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateMasterDataLogGroup"
      ]
    },
    "RegisterEmployeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterEmployeeLogGroup"
      ]
    },
    "EmployeeLoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeLoginLogGroup"
      ]
    },
    "EmployeeLogoutLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeLogoutLogGroup"
      ]
    },
    "TokenVerifyLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-tokenVerify",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TokenVerifyLogGroup"
      ]
    },
    "LeadformLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-leadform",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LeadformLogGroup"
      ]
    },
    "GetClientDetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getClientDetails",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetClientDetailsLogGroup"
      ]
    },
    "UpdateEmployeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEmployeeLogGroup"
      ]
    },
    "SendReinviteLinkLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/Notification/routes/empCredentialsRoute.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-sendReinviteLink",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendReinviteLinkLogGroup"
      ]
    },
    "ManagerNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ManagerNotificationsLogGroup"
      ]
    },
    "HandleNotificationsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HandleNotificationsLogGroup"
      ]
    },
    "EmployeeExitFormLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "EmployeeExitFormLogGroup"
      ]
    },
    "ExpenseSubmitLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseSubmitLogGroup"
      ]
    },
    "ExpenseApproveLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseApproveLogGroup"
      ]
    },
    "ExpenseAccountsUpdateLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ExpenseAccountsUpdateLogGroup"
      ]
    },
    "UpdateEmployeeDetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateEmployeeDetailsLogGroup"
      ]
    },
    "GetEmployeeEidLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEmployeeEidLogGroup"
      ]
    },
    "GetAllExpensesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllExpensesLogGroup"
      ]
    },
    "GetApprovedExpensesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetApprovedExpensesLogGroup"
      ]
    },
    "GetExpensebyIDLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-getExpensebyID",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetExpensebyIDLogGroup"
      ]
    },
    "UpdateExpenseIDLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-updateExpenseID",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateExpenseIDLogGroup"
      ]
    },
    "DeleteEmployeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
          "S3Key": "serverless/enterprise-resource-planning/dev/1748838317241-2025-06-02T04:25:17.241Z/enterprise-resource-planning.zip"
        },
        "Handler": "src/routes/empMaster-route.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "enterprise-resource-planning-dev-deleteEmployee",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
            "JWT_SECRET": "amergingtech5757",
            "EMAIL_USER": "internal@amergingtech.com",
            "EMAIL_PASSWORD": "braz dbta pjhm davx",
            "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DeleteEmployeeLogGroup"
      ]
    },
    "HomeLambdaVersion3AC7raw9raOGuJU5Cc8zbYxbdHHiXCjFkMtDW2W0Zo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HomeLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ProjectFormLambdaVersionQ8W8aog8EfPpT5MCYQvTONOmNREskYRGv2dNxe7QEU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProjectFormLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetAllEmployeesLambdaVersion6Xs5fWdj4doSf97Yie5xFOGxqXd795GQJCdEz0Skwm4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllEmployeesLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetAllEmpCredentialsLambdaVersionIwAlC495nN29FFSlR4Ng0YnYyeFF7w5KvEqLJWeLU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllEmpCredentialsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "SendOtpHandlerLambdaVersion9KvZqyjZH4uytdnLPtnLppZ6SGzFYpNPMpydmrr5DfA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendOtpHandlerLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "VerifyOtpHandlerLambdaVersionA0T1AxRyCtEK2dpWaNqE6EBQjAyoEFu6WnIBUwgx0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "VerifyOtpHandlerLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ForgotPasswordHandlerLambdaVersion5D9biNzDtZZxaTCvdBjXvxihegMQp7Ju5nQHFkmnlIc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ForgotPasswordHandlerLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "TourExpenseFormLambdaVersionEtWSjDz6kcQwyh0Z9V0zdRVE5ltUbuqZTWOpKnqJNI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TourExpenseFormLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetTourExpenseLambdaVersionOP5rSkQNFA85oR8i2bEkTeMwvJRIyDGCyuaiVuPXds": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTourExpenseLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateTourExpenseLambdaVersion8SLvumMjkjtEW3Ac3X7RHQ1KaYRYqzBVWkjU0pJMY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTourExpenseLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateTourExpenseAccountsLambdaVersiong7qDs7kxHynsNF6YtRV7oAlxJN628gTxR8HqlroY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateTourExpenseAccountsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetLeaveDataLambdaVersionMG8S3xWTcBAtsoPsVopKuGfhZ0MdafgLIrs6xWhs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetLeaveDataLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmailFormatLambdaVersiongXT04BgzjZUFpYqgLf9RXHvqkYdJDuSbxsktnFfmrc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmailFormatLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ApplyLeaveLambdaVersionf9gqzuQAy8TMkxec0aTAYH9I0I2xBJ9hQJiHrTLqN4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ApplyLeaveLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmployeeEvaluationLambdaVersionIYs6UNRyRpoz7nBonGvxFU64mjhHJDyEsCnh0HP5U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeEvaluationLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmpMailCredentialsLambdaVersionmyC9l6tlXYLhaRZFDAHDwutFo21SKnEytSdfbJdWE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmpMailCredentialsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmployeeStatisticsLambdaVersionlxa5jKR8TXSlznvgPbHh8BmkH6zwH8eqBCyHBH6lYzs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeStatisticsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetMasterDataLambdaVersionOeJj3xTZ3mLAsaWTCE0fyqxV8PqqT6GLuTQXeCkRQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMasterDataLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateMasterDataLambdaVersionmRAPnnCMiw1WXUYHNnUfnlqfgsAx7sIpbcwgBdXdnaE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMasterDataLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "RegisterEmployeeLambdaVersionLQG9CgLg1kvQHFkwkMDspf4zcSDWcbCkapUnnaU2c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterEmployeeLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmployeeLoginLambdaVersioneh8ncJXk4UfNNP9xY9fC38hs2ENCNmYOB5TVvD48": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeLoginLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmployeeLogoutLambdaVersionFnhVL7NS8aO5JVEXjs9LeTMfCZksVXPUHYARGs16g": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeLogoutLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "TokenVerifyLambdaVersionnhPYJ9ayqzLtWyuC888Wndrvjl6Evp34QKx5zQi1ZE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TokenVerifyLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "LeadformLambdaVersionwRZDheBpDcAYZ7Be1xoVkH8z2yZ3oJ4MCgETmeOx4o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LeadformLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetClientDetailsLambdaVersion30BcbAaNXj36duZgZKqwSaFF0jDVqxrwNqXpRjYOOc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetClientDetailsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateEmployeeLambdaVersionWVehL3C67fhRRyBmobZUZ1QhtxajyPyIuBH7CwWqI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEmployeeLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "SendReinviteLinkLambdaVersionKaxxJOG714jAqtulBIuweKb7wDkLhCr1qwCFHk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendReinviteLinkLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ManagerNotificationsLambdaVersionzfBFPOZkcBz6EjmQ8FavdUjFDGRXv1RSCvgCYIOE7M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ManagerNotificationsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "HandleNotificationsLambdaVersionKkToIEemytVoK3Vpx8U9nbBbTm3QYrK4HszZOcpHhVA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HandleNotificationsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "EmployeeExitFormLambdaVersionfiZHoXneASljityJqFroqo2JLKFQn0q1NIeLJL2vL8Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "EmployeeExitFormLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ExpenseSubmitLambdaVersionNXYxcVgQbhaj2bUWKM5FNYyZsmWOZmjVSKWB63UD2Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseSubmitLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ExpenseApproveLambdaVersionzt4GPv4dYz1vwUuJNFzs0cHzFobIHkj3pl1tSW49AE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseApproveLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "ExpenseAccountsUpdateLambdaVersion9pen4E4GD3lfmilaIQbj0zprbJ8bwZq83St0JUdsa0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ExpenseAccountsUpdateLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateEmployeeDetailsLambdaVersionL59t15LA1Bp6VBSSmDWEq4Wqh7OyLaZfWoHLsnVYu0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateEmployeeDetailsLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetEmployeeEidLambdaVersionyUEgm4gOJu91xhrRijvkuJN8yqFe64pnw0b2re59k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEmployeeEidLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetAllExpensesLambdaVersionHh4nBewvfgvbuAn6ALKTOrnK6cWS8g7ckfc386F8kA0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllExpensesLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetApprovedExpensesLambdaVersionD1j1jmSTAqsqKwW5COcJjMIryJVWpbhA55FU726S9U": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetApprovedExpensesLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "GetExpensebyIDLambdaVersionLoacz7uSauAY7FgIddPONyVoHb340ghrb8iWAC3DTko": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetExpensebyIDLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "UpdateExpenseIDLambdaVersionhHOMWGNWXoRnK399PvFHGnq0nR7G0omYoqQZjHfHU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateExpenseIDLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "DeleteEmployeeLambdaVersionrXBmSwSheZAvBSbGnbbmXLbA7aZKXbl6uST1B4KNNY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DeleteEmployeeLambdaFunction"
        },
        "CodeSha256": "2CqJjvqVO+8yuU0RAk/pUiAa5tAXOVWqIEOqVADZA14="
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-enterprise-resource-planning",
        "ProtocolType": "HTTP",
        "CorsConfiguration": {
          "AllowHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "AllowMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "AllowOrigins": [
            "*"
          ],
          "MaxAge": 86400
        }
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "HomeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHome": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HomeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGet": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHome"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHome"
    },
    "ProjectFormLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ProjectFormLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationProjectForm": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ProjectFormLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiProjectDashform": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/project-form",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationProjectForm"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationProjectForm"
    },
    "GetAllEmployeesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllEmployeesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllEmployees": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllEmployeesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiGetemp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/getemp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllEmployees"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllEmployees"
    },
    "GetAllEmpCredentialsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllEmpCredentialsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllEmpCredentials": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllEmpCredentialsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiEmpcredentials": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/emp_credentials",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllEmpCredentials"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllEmpCredentials"
    },
    "SendOtpHandlerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendOtpHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSendOtpHandler": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SendOtpHandlerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiAuthSendDashotp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/auth/send-otp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSendOtpHandler"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSendOtpHandler"
    },
    "VerifyOtpHandlerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "VerifyOtpHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationVerifyOtpHandler": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "VerifyOtpHandlerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiAuthVerifyDashotp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/auth/verify-otp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationVerifyOtpHandler"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationVerifyOtpHandler"
    },
    "ForgotPasswordHandlerLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ForgotPasswordHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationForgotPasswordHandler": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ForgotPasswordHandlerLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiAuthResetDashpassword": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/auth/reset-password",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationForgotPasswordHandler"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationForgotPasswordHandler"
    },
    "TourExpenseFormLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TourExpenseFormLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationTourExpenseForm": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "TourExpenseFormLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiTourexpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/tourExpense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationTourExpenseForm"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationTourExpenseForm"
    },
    "GetTourExpenseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTourExpenseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetTourExpense": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetTourExpenseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiTourexpensedata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/tourExpensedata",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetTourExpense"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetTourExpense"
    },
    "UpdateTourExpenseLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTourExpenseLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTourExpense": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTourExpenseLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiTourexpenseExpenserefnoVarApprove": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/approve",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTourExpense"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTourExpense"
    },
    "UpdateTourExpenseAccountsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateTourExpenseAccountsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateTourExpenseAccounts": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateTourExpenseAccountsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiTourexpenseExpenserefnoVarAccounts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/tourExpense/{expenseRefNo}/accounts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateTourExpenseAccounts"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateTourExpenseAccounts"
    },
    "GetLeaveDataLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetLeaveDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetLeaveData": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetLeaveDataLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiLeaveDashdata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/leave-data",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetLeaveData"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetLeaveData"
    },
    "EmailFormatLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmailFormatLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmailFormat": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmailFormatLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmailformat": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/email_format",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmailFormat"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmailFormat"
    },
    "ApplyLeaveLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ApplyLeaveLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationApplyLeave": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ApplyLeaveLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiApplyDashleave": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/apply-leave",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationApplyLeave"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationApplyLeave"
    },
    "EmployeeEvaluationLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeEvaluationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeEvaluation": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeEvaluationLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmployeeDashevaluation": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/employee-evaluation",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeEvaluation"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
    },
    "EmpMailCredentialsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmpMailCredentialsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmpMailCredentials": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmpMailCredentialsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiCredentials": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/credentials",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmpMailCredentials"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmpMailCredentials"
    },
    "EmployeeStatisticsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeStatisticsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeStatistics": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeStatisticsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiEmpStats": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/emp/stats",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeStatistics"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeStatistics"
    },
    "GetMasterDataLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMasterDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetMasterData": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetMasterDataLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiGetDashmasterDashdata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/get-master-data",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetMasterData"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetMasterData"
    },
    "UpdateMasterDataLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMasterDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateMasterData": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateMasterDataLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiUpdateDashmasterDashdata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/update-master-data",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateMasterData"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateMasterData"
    },
    "RegisterEmployeeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationRegisterEmployee": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "RegisterEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiRegemp": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/regemp",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationRegisterEmployee"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationRegisterEmployee"
    },
    "EmployeeLoginLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeLoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeLogin": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeLoginLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmpLogin": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/emp/login",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeLogin"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeLogin"
    },
    "EmployeeLogoutLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeLogoutLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeLogout": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeLogoutLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiEmpLogout": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/emp/logout",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeLogout"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeLogout"
    },
    "TokenVerifyLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TokenVerifyLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationTokenVerify": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "TokenVerifyLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiTokenVerify": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/token/verify",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationTokenVerify"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationTokenVerify"
    },
    "LeadformLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LeadformLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationLeadform": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "LeadformLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiLeadDashform": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/lead-form",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationLeadform"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationLeadform"
    },
    "GetClientDetailsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetClientDetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetClientDetails": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetClientDetailsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiClientDashdata": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/client-data",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetClientDetails"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetClientDetails"
    },
    "UpdateEmployeeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEmployee": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiEmpEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/emp/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEmployee"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEmployee"
    },
    "SendReinviteLinkLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendReinviteLinkLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationSendReinviteLink": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "SendReinviteLinkLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiReinviteEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/reinvite/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationSendReinviteLink"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationSendReinviteLink"
    },
    "ManagerNotificationsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ManagerNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationManagerNotifications": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ManagerNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiNotificationsManager": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/notifications/manager",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationManagerNotifications"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationManagerNotifications"
    },
    "HandleNotificationsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HandleNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationHandleNotifications": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "HandleNotificationsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiNotificationsHandle": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/notifications/handle",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationHandleNotifications"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationHandleNotifications"
    },
    "EmployeeExitFormLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "EmployeeExitFormLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationEmployeeExitForm": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "EmployeeExitFormLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiExitDashform": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/exit-form",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationEmployeeExitForm"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationEmployeeExitForm"
    },
    "ExpenseSubmitLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseSubmitLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseSubmit": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseSubmitLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostApiExpense": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /api/expense",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseSubmit"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseSubmit"
    },
    "ExpenseApproveLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseApproveLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseApprove": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseApproveLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/expense/{refNo}/approve",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseApprove"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseApprove"
    },
    "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ExpenseAccountsUpdateLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationExpenseAccountsUpdate": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "ExpenseAccountsUpdateLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/expense/{refNo}/accounts",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
    },
    "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateEmployeeDetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateEmployeeDetails": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateEmployeeDetailsLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiUpdateDashempEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/update-emp/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
    },
    "GetEmployeeEidLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEmployeeEidLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetEmployeeEid": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetEmployeeEidLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiGetDashempEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/get-emp/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetEmployeeEid"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetEmployeeEid"
    },
    "GetAllExpensesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllExpensesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetAllExpenses": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetAllExpensesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiExpenses": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/expenses",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetAllExpenses"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetAllExpenses"
    },
    "GetApprovedExpensesLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetApprovedExpensesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetApprovedExpenses": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetApprovedExpensesLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiExpensesApproved": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/expenses/approved",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetApprovedExpenses"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
    },
    "GetExpensebyIDLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetExpensebyIDLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationGetExpensebyID": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "GetExpensebyIDLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteGetApiGetDashexpenseExpenseidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "GET /api/get-expense/{expenseId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationGetExpensebyID"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationGetExpensebyID"
    },
    "UpdateExpenseIDLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateExpenseIDLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationUpdateExpenseID": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "UpdateExpenseIDLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePatchApiUpdateDashexpenseExpenseidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "PATCH /api/update-expense/{expenseId}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationUpdateExpenseID"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationUpdateExpenseID"
    },
    "DeleteEmployeeLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DeleteEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDeleteEmployee": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DeleteEmployeeLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRouteDeleteApiDeleteDashempEidVar": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "DELETE /api/delete-emp/{eID}",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDeleteEmployee"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDeleteEmployee"
    },
    "NotificationsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Notifications",
        "AttributeDefinitions": [
          {
            "AttributeName": "notificationId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "notificationId",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
      }
    },
    "HomeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HomeLambdaVersion3AC7raw9raOGuJU5Cc8zbYxbdHHiXCjFkMtDW2W0Zo"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
      }
    },
    "ProjectFormLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProjectFormLambdaVersionQ8W8aog8EfPpT5MCYQvTONOmNREskYRGv2dNxe7QEU"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
      }
    },
    "GetAllEmployeesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllEmployeesLambdaVersion6Xs5fWdj4doSf97Yie5xFOGxqXd795GQJCdEz0Skwm4"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
      }
    },
    "GetAllEmpCredentialsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllEmpCredentialsLambdaVersionIwAlC495nN29FFSlR4Ng0YnYyeFF7w5KvEqLJWeLU"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetAllEmpCredentialsLambdaFunctionQualifiedArn"
      }
    },
    "SendOtpHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendOtpHandlerLambdaVersion9KvZqyjZH4uytdnLPtnLppZ6SGzFYpNPMpydmrr5DfA"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
      }
    },
    "VerifyOtpHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "VerifyOtpHandlerLambdaVersionA0T1AxRyCtEK2dpWaNqE6EBQjAyoEFu6WnIBUwgx0"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
      }
    },
    "ForgotPasswordHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ForgotPasswordHandlerLambdaVersion5D9biNzDtZZxaTCvdBjXvxihegMQp7Ju5nQHFkmnlIc"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ForgotPasswordHandlerLambdaFunctionQualifiedArn"
      }
    },
    "TourExpenseFormLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TourExpenseFormLambdaVersionEtWSjDz6kcQwyh0Z9V0zdRVE5ltUbuqZTWOpKnqJNI"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-TourExpenseFormLambdaFunctionQualifiedArn"
      }
    },
    "GetTourExpenseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTourExpenseLambdaVersionOP5rSkQNFA85oR8i2bEkTeMwvJRIyDGCyuaiVuPXds"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetTourExpenseLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTourExpenseLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTourExpenseLambdaVersion8SLvumMjkjtEW3Ac3X7RHQ1KaYRYqzBVWkjU0pJMY"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseLambdaFunctionQualifiedArn"
      }
    },
    "UpdateTourExpenseAccountsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateTourExpenseAccountsLambdaVersiong7qDs7kxHynsNF6YtRV7oAlxJN628gTxR8HqlroY"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateTourExpenseAccountsLambdaFunctionQualifiedArn"
      }
    },
    "GetLeaveDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetLeaveDataLambdaVersionMG8S3xWTcBAtsoPsVopKuGfhZ0MdafgLIrs6xWhs"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
      }
    },
    "EmailFormatLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmailFormatLambdaVersiongXT04BgzjZUFpYqgLf9RXHvqkYdJDuSbxsktnFfmrc"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
      }
    },
    "ApplyLeaveLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ApplyLeaveLambdaVersionf9gqzuQAy8TMkxec0aTAYH9I0I2xBJ9hQJiHrTLqN4"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeEvaluationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeEvaluationLambdaVersionIYs6UNRyRpoz7nBonGvxFU64mjhHJDyEsCnh0HP5U"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
      }
    },
    "EmpMailCredentialsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmpMailCredentialsLambdaVersionmyC9l6tlXYLhaRZFDAHDwutFo21SKnEytSdfbJdWE"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmpMailCredentialsLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeStatisticsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeStatisticsLambdaVersionlxa5jKR8TXSlznvgPbHh8BmkH6zwH8eqBCyHBH6lYzs"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
      }
    },
    "GetMasterDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMasterDataLambdaVersionOeJj3xTZ3mLAsaWTCE0fyqxV8PqqT6GLuTQXeCkRQ"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMasterDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMasterDataLambdaVersionmRAPnnCMiw1WXUYHNnUfnlqfgsAx7sIpbcwgBdXdnaE"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
      }
    },
    "RegisterEmployeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterEmployeeLambdaVersionLQG9CgLg1kvQHFkwkMDspf4zcSDWcbCkapUnnaU2c"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeLoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeLoginLambdaVersioneh8ncJXk4UfNNP9xY9fC38hs2ENCNmYOB5TVvD48"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeLogoutLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeLogoutLambdaVersionFnhVL7NS8aO5JVEXjs9LeTMfCZksVXPUHYARGs16g"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
      }
    },
    "TokenVerifyLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TokenVerifyLambdaVersionnhPYJ9ayqzLtWyuC888Wndrvjl6Evp34QKx5zQi1ZE"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
      }
    },
    "LeadformLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LeadformLambdaVersionwRZDheBpDcAYZ7Be1xoVkH8z2yZ3oJ4MCgETmeOx4o"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
      }
    },
    "GetClientDetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetClientDetailsLambdaVersion30BcbAaNXj36duZgZKqwSaFF0jDVqxrwNqXpRjYOOc"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetClientDetailsLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEmployeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEmployeeLambdaVersionWVehL3C67fhRRyBmobZUZ1QhtxajyPyIuBH7CwWqI"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
      }
    },
    "SendReinviteLinkLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendReinviteLinkLambdaVersionKaxxJOG714jAqtulBIuweKb7wDkLhCr1qwCFHk"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-SendReinviteLinkLambdaFunctionQualifiedArn"
      }
    },
    "ManagerNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ManagerNotificationsLambdaVersionzfBFPOZkcBz6EjmQ8FavdUjFDGRXv1RSCvgCYIOE7M"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
      }
    },
    "HandleNotificationsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HandleNotificationsLambdaVersionKkToIEemytVoK3Vpx8U9nbBbTm3QYrK4HszZOcpHhVA"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
      }
    },
    "EmployeeExitFormLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "EmployeeExitFormLambdaVersionfiZHoXneASljityJqFroqo2JLKFQn0q1NIeLJL2vL8Y"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseSubmitLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseSubmitLambdaVersionNXYxcVgQbhaj2bUWKM5FNYyZsmWOZmjVSKWB63UD2Y"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseApproveLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseApproveLambdaVersionzt4GPv4dYz1vwUuJNFzs0cHzFobIHkj3pl1tSW49AE"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
      }
    },
    "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ExpenseAccountsUpdateLambdaVersion9pen4E4GD3lfmilaIQbj0zprbJ8bwZq83St0JUdsa0"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
      }
    },
    "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateEmployeeDetailsLambdaVersionL59t15LA1Bp6VBSSmDWEq4Wqh7OyLaZfWoHLsnVYu0"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
      }
    },
    "GetEmployeeEidLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEmployeeEidLambdaVersionyUEgm4gOJu91xhrRijvkuJN8yqFe64pnw0b2re59k"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
      }
    },
    "GetAllExpensesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllExpensesLambdaVersionHh4nBewvfgvbuAn6ALKTOrnK6cWS8g7ckfc386F8kA0"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
      }
    },
    "GetApprovedExpensesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetApprovedExpensesLambdaVersionD1j1jmSTAqsqKwW5COcJjMIryJVWpbhA55FU726S9U"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
      }
    },
    "GetExpensebyIDLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetExpensebyIDLambdaVersionLoacz7uSauAY7FgIddPONyVoHb340ghrb8iWAC3DTko"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
      }
    },
    "UpdateExpenseIDLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateExpenseIDLambdaVersionhHOMWGNWXoRnK399PvFHGnq0nR7G0omYoqQZjHfHU"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
      }
    },
    "DeleteEmployeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DeleteEmployeeLambdaVersionrXBmSwSheZAvBSbGnbbmXLbA7aZKXbl6uST1B4KNNY"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
      }
    }
  }
}