{
  "service": {
    "service": "enterprise-resource-planning",
    "serviceObject": {
      "name": "enterprise-resource-planning"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-south-1",
      "timeout": 30,
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "maxAge": 86400
        }
      },
      "environment": {
        "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
        "JWT_SECRET": "amergingtech5757",
        "EMAIL_USER": "daksh4568thakur@gmail.com",
        "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
            }
          },
          "GetAllEmployeesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
            }
          },
          "GetLeaveDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
            }
          },
          "ApplyLeaveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
            }
          },
          "EmployeeEvaluationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
            }
          },
          "EmployeeStatisticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
            }
          },
          "RegisterEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
            }
          },
          "EmployeeLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
            }
          },
          "EmployeeLogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
            }
          },
          "TokenVerifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tokenVerify"
            }
          },
          "UpdateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
            }
          },
          "ManagerNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
            }
          },
          "HandleNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
            }
          },
          "EmployeeExitFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
            }
          },
          "ExpenseSubmitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
            }
          },
          "ExpenseApproveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
            }
          },
          "ExpenseAccountsUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
            }
          },
          "UpdateEmployeeDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
            }
          },
          "GetEmployeeEidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
            }
          },
          "GetAllExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
            }
          },
          "GetApprovedExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "enterprise-resource-planning",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "enterprise-resource-planning",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-home",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "GetAllEmployeesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllEmployeesLogGroup"
            ]
          },
          "GetLeaveDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaveDataLogGroup"
            ]
          },
          "ApplyLeaveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-applyLeave",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApplyLeaveLogGroup"
            ]
          },
          "EmployeeEvaluationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeEvaluationLogGroup"
            ]
          },
          "EmployeeStatisticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeStatisticsLogGroup"
            ]
          },
          "RegisterEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterEmployeeLogGroup"
            ]
          },
          "EmployeeLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLoginLogGroup"
            ]
          },
          "EmployeeLogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLogoutLogGroup"
            ]
          },
          "TokenVerifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-tokenVerify",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TokenVerifyLogGroup"
            ]
          },
          "UpdateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeLogGroup"
            ]
          },
          "ManagerNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ManagerNotificationsLogGroup"
            ]
          },
          "HandleNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleNotificationsLogGroup"
            ]
          },
          "EmployeeExitFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeExitFormLogGroup"
            ]
          },
          "ExpenseSubmitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseSubmitLogGroup"
            ]
          },
          "ExpenseApproveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseApproveLogGroup"
            ]
          },
          "ExpenseAccountsUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseAccountsUpdateLogGroup"
            ]
          },
          "UpdateEmployeeDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeDetailsLogGroup"
            ]
          },
          "GetEmployeeEidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmployeeEidLogGroup"
            ]
          },
          "GetAllExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllExpensesLogGroup"
            ]
          },
          "GetApprovedExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetApprovedExpensesLogGroup"
            ]
          },
          "HomeLambdaVersionLtZGrpzC8IfaJqU8jVCPzEVPyW7NlhcE8g5uYw1HTo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "GetAllEmployeesLambdaVersionq8aoYPp9DWScJIj8YDyr3qwUv8WpdjMd0J240okJcw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllEmployeesLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "GetLeaveDataLambdaVersionxE4FeuLp5PzDTtx03lHKrAai6QshVabKl8Kn1VJE90": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaveDataLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "ApplyLeaveLambdaVersionVd7iLGw9G4B2JREY0gV5CmYf4yCh9CcTPGlmDvs9qA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApplyLeaveLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "EmployeeEvaluationLambdaVersionAMKpYAjSmqgLGkPcPSqU9rRd1w2p1VLn3mXREwFY8yY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeEvaluationLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "EmployeeStatisticsLambdaVersionxuf3mZwsJPCHy39tyGfIwuvyWZ2WvKeawSkeDI3Y7I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeStatisticsLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "RegisterEmployeeLambdaVersionLhnyHviFaq93r1C6sQ0ofRqvONCJaJo1rXZY0a1kCuc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterEmployeeLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "EmployeeLoginLambdaVersionLnuimMiVYiLhBQ0V9b6XfthtrzrxrZ3Bc30kAR8wbo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLoginLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "EmployeeLogoutLambdaVersions5hXlYpKrxIxx83C5sea6laOOUhNX98FXcwsrcU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLogoutLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "TokenVerifyLambdaVersionfu93pqDUUOetCDZJyO2LPpqimoH6EepyzS9joDa8Ew0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TokenVerifyLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "UpdateEmployeeLambdaVersionN5PziN2zlfo3kMb24qYxWL6v1B2jOUkMeHxwStMBI0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "ManagerNotificationsLambdaVersiong9lRylBv7GpCD0MykmGmmsUjrGH1YBfeKxHhaOnCaA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ManagerNotificationsLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "HandleNotificationsLambdaVersiontN4mLrB5uNlAg1yfNrehlpc5FqBlfrc7Jy68zrlS44": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleNotificationsLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "EmployeeExitFormLambdaVersionc6hhHOUSekztIoe1PAcKOSX4nMRVAL7KvKtGqRzEY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeExitFormLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "ExpenseSubmitLambdaVersionwdFa9KFRmDrPVEG03O43My3nsLb4KXTeL3l2ApK8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseSubmitLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "ExpenseApproveLambdaVersionCeISJywGDKaflfUklFKGffHZ0wXbQGYODeKN81aSr8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseApproveLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "ExpenseAccountsUpdateLambdaVersionHQ4TCQAFQPmMN01o8j6v27ZsoeCk5t28gbGJJbCk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseAccountsUpdateLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "UpdateEmployeeDetailsLambdaVersionpw0Zs7GIXhArhh2XvYfqrZtDdECIsRowgJk3E6VXVk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeDetailsLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "GetEmployeeEidLambdaVersion0bJ4Ee2OrUFj46CQc1qp4gQMkb7lCJSq7Oo3rvPM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmployeeEidLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "GetAllExpensesLambdaVersionLayL2jHBd1x8FCet2juWa0K5iylwXWFSyTYpK2YrUM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllExpensesLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "GetApprovedExpensesLambdaVersionlppNPm9sYdkkB9Tzk0eNJprHvktxQp0qfVHVfKb4DA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetApprovedExpensesLambdaFunction"
              },
              "CodeSha256": "jGDgFbBbAI/v+9T03OuPZwCXFpn+uISBVvWkjt6H3Vw="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-enterprise-resource-planning",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "AllowOrigins": [
                  "*"
                ],
                "MaxAge": 86400
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HomeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHome": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HomeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHome"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHome"
          },
          "GetAllEmployeesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllEmployees": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllEmployeesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllEmployees"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllEmployees"
          },
          "GetLeaveDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetLeaveData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetLeaveDataLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiLeaveDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/leave-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetLeaveData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetLeaveData"
          },
          "ApplyLeaveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApplyLeave": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApplyLeaveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiApplyDashleave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/apply-leave",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApplyLeave"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApplyLeave"
          },
          "EmployeeEvaluationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeEvaluation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeEvaluationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmployeeDashevaluation": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/employee-evaluation",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeEvaluation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
          },
          "EmployeeStatisticsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeStatistics": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeStatisticsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiEmpStats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/emp/stats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeStatistics"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeStatistics"
          },
          "RegisterEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterEmployeeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiRegemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/regemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterEmployee"
          },
          "EmployeeLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeLoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogin"
          },
          "EmployeeLogoutLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogout": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeLogoutLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogout"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogout"
          },
          "TokenVerifyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TokenVerifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationTokenVerify": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TokenVerifyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiTokenVerify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/token/verify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationTokenVerify"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationTokenVerify"
          },
          "UpdateEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateEmployeeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiEmpEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployee"
          },
          "ManagerNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationManagerNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ManagerNotificationsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiNotificationsManager": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/notifications/manager",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationManagerNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationManagerNotifications"
          },
          "HandleNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHandleNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HandleNotificationsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiNotificationsHandle": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/notifications/handle",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHandleNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHandleNotifications"
          },
          "EmployeeExitFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeExitForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeExitFormLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExitDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/exit-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeExitForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeExitForm"
          },
          "ExpenseSubmitLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseSubmit": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseSubmitLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExpense": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/expense",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseSubmit"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseSubmit"
          },
          "ExpenseApproveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseApprove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseApproveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/approve",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseApprove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseApprove"
          },
          "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseAccountsUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseAccountsUpdateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/accounts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
          },
          "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployeeDetails": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateEmployeeDetailsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
          },
          "GetEmployeeEidLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmployeeEidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEmployeeEid": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEmployeeEidLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEmployeeEid"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEmployeeEid"
          },
          "GetAllExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllExpensesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpenses": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllExpenses"
          },
          "GetApprovedExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetApprovedExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetApprovedExpensesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpensesApproved": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses/approved",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetApprovedExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersionLtZGrpzC8IfaJqU8jVCPzEVPyW7NlhcE8g5uYw1HTo"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmployeesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllEmployeesLambdaVersionq8aoYPp9DWScJIj8YDyr3qwUv8WpdjMd0J240okJcw"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaveDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaveDataLambdaVersionxE4FeuLp5PzDTtx03lHKrAai6QshVabKl8Kn1VJE90"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
            }
          },
          "ApplyLeaveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApplyLeaveLambdaVersionVd7iLGw9G4B2JREY0gV5CmYf4yCh9CcTPGlmDvs9qA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeEvaluationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeEvaluationLambdaVersionAMKpYAjSmqgLGkPcPSqU9rRd1w2p1VLn3mXREwFY8yY"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeStatisticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeStatisticsLambdaVersionxuf3mZwsJPCHy39tyGfIwuvyWZ2WvKeawSkeDI3Y7I"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterEmployeeLambdaVersionLhnyHviFaq93r1C6sQ0ofRqvONCJaJo1rXZY0a1kCuc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLoginLambdaVersionLnuimMiVYiLhBQ0V9b6XfthtrzrxrZ3Bc30kAR8wbo"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLogoutLambdaVersions5hXlYpKrxIxx83C5sea6laOOUhNX98FXcwsrcU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
            }
          },
          "TokenVerifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TokenVerifyLambdaVersionfu93pqDUUOetCDZJyO2LPpqimoH6EepyzS9joDa8Ew0"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeLambdaVersionN5PziN2zlfo3kMb24qYxWL6v1B2jOUkMeHxwStMBI0"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "ManagerNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ManagerNotificationsLambdaVersiong9lRylBv7GpCD0MykmGmmsUjrGH1YBfeKxHhaOnCaA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "HandleNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleNotificationsLambdaVersiontN4mLrB5uNlAg1yfNrehlpc5FqBlfrc7Jy68zrlS44"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeExitFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeExitFormLambdaVersionc6hhHOUSekztIoe1PAcKOSX4nMRVAL7KvKtGqRzEY"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseSubmitLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseSubmitLambdaVersionwdFa9KFRmDrPVEG03O43My3nsLb4KXTeL3l2ApK8"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseApproveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseApproveLambdaVersionCeISJywGDKaflfUklFKGffHZ0wXbQGYODeKN81aSr8"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseAccountsUpdateLambdaVersionHQ4TCQAFQPmMN01o8j6v27ZsoeCk5t28gbGJJbCk"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeDetailsLambdaVersionpw0Zs7GIXhArhh2XvYfqrZtDdECIsRowgJk3E6VXVk"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetEmployeeEidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmployeeEidLambdaVersion0bJ4Ee2OrUFj46CQc1qp4gQMkb7lCJSq7Oo3rvPM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
            }
          },
          "GetAllExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllExpensesLambdaVersionLayL2jHBd1x8FCet2juWa0K5iylwXWFSyTYpK2YrUM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetApprovedExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetApprovedExpensesLambdaVersionlppNPm9sYdkkB9Tzk0eNJprHvktxQp0qfVHVfKb4DA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3000
      }
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "home": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "name": "enterprise-resource-planning-dev-home",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HomeLambdaVersionLtZGrpzC8IfaJqU8jVCPzEVPyW7NlhcE8g5uYw1HTo"
      },
      "getAllEmployees": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/getemp",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/getemp"
          }
        ],
        "name": "enterprise-resource-planning-dev-getAllEmployees",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllEmployeesLambdaVersionq8aoYPp9DWScJIj8YDyr3qwUv8WpdjMd0J240okJcw"
      },
      "getLeaveData": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/leave-data",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/leave-data"
          }
        ],
        "name": "enterprise-resource-planning-dev-getLeaveData",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetLeaveDataLambdaVersionxE4FeuLp5PzDTtx03lHKrAai6QshVabKl8Kn1VJE90"
      },
      "applyLeave": {
        "handler": "src/routes/empMaster-route.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/api/apply-leave",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/apply-leave"
          }
        ],
        "name": "enterprise-resource-planning-dev-applyLeave",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ApplyLeaveLambdaVersionVd7iLGw9G4B2JREY0gV5CmYf4yCh9CcTPGlmDvs9qA"
      },
      "employeeEvaluation": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/employee-evaluation",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/employee-evaluation"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeEvaluation",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeEvaluationLambdaVersionAMKpYAjSmqgLGkPcPSqU9rRd1w2p1VLn3mXREwFY8yY"
      },
      "employeeStatistics": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/stats",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/emp/stats"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeStatistics",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeStatisticsLambdaVersionxuf3mZwsJPCHy39tyGfIwuvyWZ2WvKeawSkeDI3Y7I"
      },
      "registerEmployee": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/regemp",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/regemp"
          }
        ],
        "name": "enterprise-resource-planning-dev-registerEmployee",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "RegisterEmployeeLambdaVersionLhnyHviFaq93r1C6sQ0ofRqvONCJaJo1rXZY0a1kCuc"
      },
      "employeeLogin": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/emp/login"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeLogin",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeLoginLambdaVersionLnuimMiVYiLhBQ0V9b6XfthtrzrxrZ3Bc30kAR8wbo"
      },
      "employeeLogout": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/logout",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/emp/logout"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeLogout",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeLogoutLambdaVersions5hXlYpKrxIxx83C5sea6laOOUhNX98FXcwsrcU"
      },
      "tokenVerify": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/token/verify",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/token/verify"
          }
        ],
        "name": "enterprise-resource-planning-dev-tokenVerify",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "TokenVerifyLambdaVersionfu93pqDUUOetCDZJyO2LPpqimoH6EepyzS9joDa8Ew0"
      },
      "updateEmployee": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/{eID}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateEmployee",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateEmployeeLambdaVersionN5PziN2zlfo3kMb24qYxWL6v1B2jOUkMeHxwStMBI0"
      },
      "managerNotifications": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/notifications/manager",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/notifications/manager"
          }
        ],
        "name": "enterprise-resource-planning-dev-managerNotifications",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ManagerNotificationsLambdaVersiong9lRylBv7GpCD0MykmGmmsUjrGH1YBfeKxHhaOnCaA"
      },
      "handleNotifications": {
        "handler": "src/routes/empMaster-route.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/api/notifications/handle",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/notifications/handle"
          }
        ],
        "name": "enterprise-resource-planning-dev-handleNotifications",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HandleNotificationsLambdaVersiontN4mLrB5uNlAg1yfNrehlpc5FqBlfrc7Jy68zrlS44"
      },
      "employeeExitForm": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/exit-form",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/exit-form"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeExitForm",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeExitFormLambdaVersionc6hhHOUSekztIoe1PAcKOSX4nMRVAL7KvKtGqRzEY"
      },
      "expenseSubmit": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/expense"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseSubmit",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseSubmitLambdaVersionwdFa9KFRmDrPVEG03O43My3nsLb4KXTeL3l2ApK8"
      },
      "expenseApprove": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense/{refNo}/approve",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/expense/{refNo}/approve"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseApprove",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseApproveLambdaVersionCeISJywGDKaflfUklFKGffHZ0wXbQGYODeKN81aSr8"
      },
      "expenseAccountsUpdate": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense/{refNo}/accounts",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/expense/{refNo}/accounts"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseAccountsUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseAccountsUpdateLambdaVersionHQ4TCQAFQPmMN01o8j6v27ZsoeCk5t28gbGJJbCk"
      },
      "updateEmployeeDetails": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/update-emp/{eID}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/update-emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateEmployeeDetails",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateEmployeeDetailsLambdaVersionpw0Zs7GIXhArhh2XvYfqrZtDdECIsRowgJk3E6VXVk"
      },
      "getEmployeeEid": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/get-emp/{eID}",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/get-emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-getEmployeeEid",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetEmployeeEidLambdaVersion0bJ4Ee2OrUFj46CQc1qp4gQMkb7lCJSq7Oo3rvPM"
      },
      "getAllExpenses": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expenses",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/expenses"
          }
        ],
        "name": "enterprise-resource-planning-dev-getAllExpenses",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllExpensesLambdaVersionLayL2jHBd1x8FCet2juWa0K5iylwXWFSyTYpK2YrUM"
      },
      "getApprovedExpenses": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expenses/approved",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/expenses/approved"
          }
        ],
        "name": "enterprise-resource-planning-dev-getApprovedExpenses",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetApprovedExpensesLambdaVersionlppNPm9sYdkkB9Tzk0eNJprHvktxQp0qfVHVfKb4DA"
      }
    },
    "resources": {
      "Resources": {
        "NotificationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Notifications",
            "AttributeDefinitions": [
              {
                "AttributeName": "notificationId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "notificationId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "developer4568",
      "service": "enterprise-resource-planning",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "appId": null,
    "org": "developer4568",
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\.serverless\\enterprise-resource-planning.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/enterprise-resource-planning/dev/1739870614780-2025-02-18T09:23:34.780Z",
    "artifact": "enterprise-resource-planning.zip"
  }
}