{
  "service": {
    "service": "enterprise-resource-planning",
    "serviceObject": {
      "name": "enterprise-resource-planning"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "ap-south-1",
      "timeout": 30,
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "PATCH"
          ],
          "maxAge": 86400
        }
      },
      "environment": {
        "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
        "JWT_SECRET": "amergingtech5757",
        "EMAIL_USER": "daksh4568thakur@gmail.com",
        "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
        "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "HomeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-home"
            }
          },
          "ProjectFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-projectForm"
            }
          },
          "GetAllEmployeesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmployees"
            }
          },
          "GetAllEmpCredentialsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllEmpCredentials"
            }
          },
          "SendOtpHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-sendOtpHandler"
            }
          },
          "VerifyOtpHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-verifyOtpHandler"
            }
          },
          "ForgotPasswordHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-forgotPasswordHandler"
            }
          },
          "GetLeaveDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getLeaveData"
            }
          },
          "EmailFormatLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-emailFormat"
            }
          },
          "ApplyLeaveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-applyLeave"
            }
          },
          "EmployeeEvaluationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeEvaluation"
            }
          },
          "EmpMailCredentialsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-empMailCredentials"
            }
          },
          "EmployeeStatisticsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeStatistics"
            }
          },
          "GetMasterDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getMasterData"
            }
          },
          "UpdateMasterDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateMasterData"
            }
          },
          "RegisterEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-registerEmployee"
            }
          },
          "EmployeeLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogin"
            }
          },
          "EmployeeLogoutLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeLogout"
            }
          },
          "TokenVerifyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-tokenVerify"
            }
          },
          "LeadformLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-leadform"
            }
          },
          "UpdateEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployee"
            }
          },
          "ManagerNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-managerNotifications"
            }
          },
          "HandleNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-handleNotifications"
            }
          },
          "EmployeeExitFormLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-employeeExitForm"
            }
          },
          "ExpenseSubmitLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseSubmit"
            }
          },
          "ExpenseApproveLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseApprove"
            }
          },
          "ExpenseAccountsUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-expenseAccountsUpdate"
            }
          },
          "UpdateEmployeeDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateEmployeeDetails"
            }
          },
          "GetEmployeeEidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getEmployeeEid"
            }
          },
          "GetAllExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getAllExpenses"
            }
          },
          "GetApprovedExpensesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getApprovedExpenses"
            }
          },
          "GetExpensebyIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-getExpensebyID"
            }
          },
          "UpdateExpenseIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-updateExpenseID"
            }
          },
          "DeleteEmployeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/enterprise-resource-planning-dev-deleteEmployee"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "enterprise-resource-planning",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/enterprise-resource-planning-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "enterprise-resource-planning",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "HomeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-home",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HomeLogGroup"
            ]
          },
          "ProjectFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-projectForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProjectFormLogGroup"
            ]
          },
          "GetAllEmployeesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllEmployees",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllEmployeesLogGroup"
            ]
          },
          "GetAllEmpCredentialsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllEmpCredentials",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllEmpCredentialsLogGroup"
            ]
          },
          "SendOtpHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-sendOtpHandler",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendOtpHandlerLogGroup"
            ]
          },
          "VerifyOtpHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-verifyOtpHandler",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "VerifyOtpHandlerLogGroup"
            ]
          },
          "ForgotPasswordHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-forgotPasswordHandler",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ForgotPasswordHandlerLogGroup"
            ]
          },
          "GetLeaveDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getLeaveData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetLeaveDataLogGroup"
            ]
          },
          "EmailFormatLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/Notification/routes/empCredentialsRoute.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-emailFormat",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmailFormatLogGroup"
            ]
          },
          "ApplyLeaveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-applyLeave",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApplyLeaveLogGroup"
            ]
          },
          "EmployeeEvaluationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeEvaluation",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeEvaluationLogGroup"
            ]
          },
          "EmpMailCredentialsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-empMailCredentials",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmpMailCredentialsLogGroup"
            ]
          },
          "EmployeeStatisticsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeStatistics",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeStatisticsLogGroup"
            ]
          },
          "GetMasterDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getMasterData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMasterDataLogGroup"
            ]
          },
          "UpdateMasterDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateMasterData",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateMasterDataLogGroup"
            ]
          },
          "RegisterEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-registerEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterEmployeeLogGroup"
            ]
          },
          "EmployeeLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogin",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLoginLogGroup"
            ]
          },
          "EmployeeLogoutLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeLogout",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeLogoutLogGroup"
            ]
          },
          "TokenVerifyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-tokenVerify",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TokenVerifyLogGroup"
            ]
          },
          "LeadformLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-leadform",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LeadformLogGroup"
            ]
          },
          "UpdateEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeLogGroup"
            ]
          },
          "ManagerNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-managerNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ManagerNotificationsLogGroup"
            ]
          },
          "HandleNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-handleNotifications",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HandleNotificationsLogGroup"
            ]
          },
          "EmployeeExitFormLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-employeeExitForm",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EmployeeExitFormLogGroup"
            ]
          },
          "ExpenseSubmitLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseSubmit",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseSubmitLogGroup"
            ]
          },
          "ExpenseApproveLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseApprove",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseApproveLogGroup"
            ]
          },
          "ExpenseAccountsUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-expenseAccountsUpdate",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ExpenseAccountsUpdateLogGroup"
            ]
          },
          "UpdateEmployeeDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateEmployeeDetails",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEmployeeDetailsLogGroup"
            ]
          },
          "GetEmployeeEidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getEmployeeEid",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmployeeEidLogGroup"
            ]
          },
          "GetAllExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getAllExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllExpensesLogGroup"
            ]
          },
          "GetApprovedExpensesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getApprovedExpenses",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetApprovedExpensesLogGroup"
            ]
          },
          "GetExpensebyIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-getExpensebyID",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetExpensebyIDLogGroup"
            ]
          },
          "UpdateExpenseIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-updateExpenseID",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateExpenseIDLogGroup"
            ]
          },
          "DeleteEmployeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
                "S3Key": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z/enterprise-resource-planning.zip"
              },
              "Handler": "src/routes/empMaster-route.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "enterprise-resource-planning-dev-deleteEmployee",
              "MemorySize": 1024,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "MONGO_URI": "mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/",
                  "JWT_SECRET": "amergingtech5757",
                  "EMAIL_USER": "daksh4568thakur@gmail.com",
                  "EMAIL_PASSWORD": "jygu sxbi fvnf sczm",
                  "ENCRYPTION_KEY": "9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEmployeeLogGroup"
            ]
          },
          "HomeLambdaVersion6MMl5sg8hdEWgj0TQBBymxdYDvvuVkShGYxWoYBAc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HomeLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ProjectFormLambdaVersionUBndV631shYRGq7BakWipS8jMFjVlIE5UWXTU4qGA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProjectFormLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetAllEmployeesLambdaVersionoY08Kpem81qGgEZIde4UoQdU734v01EAjIE0b5mvR24": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllEmployeesLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetAllEmpCredentialsLambdaVersionfGzIHXdTFABvsd9i3UrGCHHBUuo4nKv5Dz89eEVGGU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllEmpCredentialsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "SendOtpHandlerLambdaVersionr7h7g4KYoruGA8GmkB8lhUntz7q5cNR0L1SAsAwk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendOtpHandlerLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "VerifyOtpHandlerLambdaVersionEzxB4RMIDPSHA8Yj3SIXPdYr0OcgH7Y5yZt5tpt1M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "VerifyOtpHandlerLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ForgotPasswordHandlerLambdaVersion5yOQaiOqRfQGpEiIAwM5iqPvSypfwXYL8vqDPcQ2Qs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ForgotPasswordHandlerLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetLeaveDataLambdaVersionp9BXlMB1WhWfYcwg90LZ3C1PpANNf88hMHKTToI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLeaveDataLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmailFormatLambdaVersiongqwdxUXtdVpCzi3COiGVG4IXaosYHucQoVyj6mfCA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmailFormatLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ApplyLeaveLambdaVersioncIcrd5Hq82EtVv651i0M52icetgG4YOcwjKDnkz0M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApplyLeaveLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmployeeEvaluationLambdaVersionKCuNHyoOW5s989XIXj9ZTjUOoCcCBjrezF7RwtydCPI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeEvaluationLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmpMailCredentialsLambdaVersionx0QwB3v6csayqWov3gg6abStCGFGOHaAVhezqA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmpMailCredentialsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmployeeStatisticsLambdaVersion0D4jLvKlXFD4No0RN3hgV80UVAwdj07j9aDatV3c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeStatisticsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetMasterDataLambdaVersionR9dT4ztAvaKhDxFs4aQORVEzhEcEAb8eV8RyvZtPU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMasterDataLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "UpdateMasterDataLambdaVersionVNR8drPduksHFdFePg0o06Ug5QIqqpXvbCmlwA5y8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateMasterDataLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "RegisterEmployeeLambdaVersionlK542MqIBAlU9uiPSwpBNQ4rGiMjHIH9MdOjGTgZA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterEmployeeLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmployeeLoginLambdaVersion2EQPwfvWLtgpbLzDfL5ncYth0tRioBVyUGPHmPwY4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLoginLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmployeeLogoutLambdaVersionwIbJEzTl08if3479JjE4BQ9luzI12M04vzJnr2ko": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeLogoutLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "TokenVerifyLambdaVersione7r1iCUtZTYvmSrWin1TKWEl4MDYOnD4y6zH64XVUI4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TokenVerifyLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "LeadformLambdaVersionXMATktLOoZUPoFPlvRZQTaHbpeTSUfARd2e3Dtfc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LeadformLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "UpdateEmployeeLambdaVersionUdZKKECkZaj9I2EFI7S9pHqacmoqtVf4EZeCegom6ck": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ManagerNotificationsLambdaVersionZ2pUs8oC2KxUpUya6BKRIZrftfcSmGFhxrY22iQkyec": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ManagerNotificationsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "HandleNotificationsLambdaVersionYdza8aeQ2OB0j9tqua5gBbYKpkfEWIk70k57rncY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HandleNotificationsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "EmployeeExitFormLambdaVersionuWbhvygXznpvHYKXPxn5K8NLbgDo6TH5s53mPAOIJE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EmployeeExitFormLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ExpenseSubmitLambdaVersionROySNYc5lHaQOPm9lT0qXNuOQnc76l3ft3L3VhXBoE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseSubmitLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ExpenseApproveLambdaVersionBxr5oZwNVyH1FMCOxoIM72T1p936v6DoP4HoMpwi2WY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseApproveLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "ExpenseAccountsUpdateLambdaVersionIY61OA2U3kzCZSZfL2w7DkzWMIkdj25EM6XSqUZbcA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ExpenseAccountsUpdateLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "UpdateEmployeeDetailsLambdaVersionkvtcCztSC7Pu6csDS6NWsTjR2KFkCY6a2CggRyUUKk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEmployeeDetailsLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetEmployeeEidLambdaVersionztt5k9A8tqBL0y4F4PR13fYd0pTseSnbFBF05aG9TM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmployeeEidLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetAllExpensesLambdaVersionClQm6RivLvnSV0MKmGkMWROhThcEEyc3eJbk8eD4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllExpensesLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetApprovedExpensesLambdaVersioncrn8TQFn23Ps07N8DcovpOJnYjd5jbcSB3fBYx9vlg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetApprovedExpensesLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "GetExpensebyIDLambdaVersionEtuNceCRdDb6vjyoVoGGC8M5vW8n0lH2jyA1Cxqkw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetExpensebyIDLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "UpdateExpenseIDLambdaVersionuqTXl3vHU1s8IzlKtMNIma8K0h9qi443dU3Qzd0OrjU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateExpenseIDLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "DeleteEmployeeLambdaVersionVEHSzGACZP93lQ4RnmXs0g8mgU4qkSCPcsKnqRwnNs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEmployeeLambdaFunction"
              },
              "CodeSha256": "NiwPR+0Ev/laFJZvaPNCw0TBi3SR8UWwXQw8NEZPYXY="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-enterprise-resource-planning",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "AllowOrigins": [
                  "*"
                ],
                "MaxAge": 86400
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HomeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HomeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHome": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HomeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHome"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHome"
          },
          "ProjectFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProjectFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationProjectForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ProjectFormLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiProjectDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/project-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationProjectForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationProjectForm"
          },
          "GetAllEmployeesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllEmployeesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllEmployees": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllEmployeesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/getemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllEmployees"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllEmployees"
          },
          "GetAllEmpCredentialsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllEmpCredentialsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllEmpCredentials": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllEmpCredentialsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiEmpcredentials": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/emp_credentials",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllEmpCredentials"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllEmpCredentials"
          },
          "SendOtpHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSendOtpHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SendOtpHandlerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiAuthSendDashotp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/auth/send-otp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSendOtpHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSendOtpHandler"
          },
          "VerifyOtpHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "VerifyOtpHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationVerifyOtpHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"VerifyOtpHandlerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiAuthVerifyDashotp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/auth/verify-otp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationVerifyOtpHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationVerifyOtpHandler"
          },
          "ForgotPasswordHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ForgotPasswordHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationForgotPasswordHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ForgotPasswordHandlerLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiAuthResetDashpassword": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/auth/reset-password",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationForgotPasswordHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationForgotPasswordHandler"
          },
          "GetLeaveDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetLeaveDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetLeaveData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetLeaveDataLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiLeaveDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/leave-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetLeaveData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetLeaveData"
          },
          "EmailFormatLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmailFormatLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmailFormat": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmailFormatLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmailformat": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/email_format",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmailFormat"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmailFormat"
          },
          "ApplyLeaveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApplyLeaveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApplyLeave": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApplyLeaveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiApplyDashleave": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/apply-leave",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApplyLeave"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApplyLeave"
          },
          "EmployeeEvaluationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeEvaluationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeEvaluation": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeEvaluationLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmployeeDashevaluation": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/employee-evaluation",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeEvaluation"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeEvaluation"
          },
          "EmpMailCredentialsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmpMailCredentialsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmpMailCredentials": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmpMailCredentialsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiCredentials": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/credentials",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmpMailCredentials"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmpMailCredentials"
          },
          "EmployeeStatisticsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeStatisticsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeStatistics": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeStatisticsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiEmpStats": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/emp/stats",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeStatistics"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeStatistics"
          },
          "GetMasterDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMasterData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetMasterDataLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashmasterDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-master-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMasterData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMasterData"
          },
          "UpdateMasterDataLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateMasterDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateMasterData": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateMasterDataLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashmasterDashdata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-master-data",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateMasterData"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateMasterData"
          },
          "RegisterEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationRegisterEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"RegisterEmployeeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiRegemp": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/regemp",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationRegisterEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationRegisterEmployee"
          },
          "EmployeeLoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeLoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogin"
          },
          "EmployeeLogoutLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeLogoutLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeLogout": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeLogoutLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiEmpLogout": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/emp/logout",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeLogout"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeLogout"
          },
          "TokenVerifyLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "TokenVerifyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationTokenVerify": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TokenVerifyLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiTokenVerify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/token/verify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationTokenVerify"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationTokenVerify"
          },
          "LeadformLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LeadformLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLeadform": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LeadformLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiLeadDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/lead-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLeadform"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLeadform"
          },
          "UpdateEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateEmployeeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiEmpEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployee"
          },
          "ManagerNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ManagerNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationManagerNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ManagerNotificationsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiNotificationsManager": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/notifications/manager",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationManagerNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationManagerNotifications"
          },
          "HandleNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HandleNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationHandleNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"HandleNotificationsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiNotificationsHandle": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/notifications/handle",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationHandleNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationHandleNotifications"
          },
          "EmployeeExitFormLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EmployeeExitFormLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationEmployeeExitForm": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"EmployeeExitFormLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExitDashform": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/exit-form",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationEmployeeExitForm"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationEmployeeExitForm"
          },
          "ExpenseSubmitLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseSubmitLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseSubmit": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseSubmitLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiExpense": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/expense",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseSubmit"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseSubmit"
          },
          "ExpenseApproveLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseApproveLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseApprove": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseApproveLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarApprove": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/approve",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseApprove"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseApprove"
          },
          "ExpenseAccountsUpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ExpenseAccountsUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationExpenseAccountsUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ExpenseAccountsUpdateLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiExpenseRefnoVarAccounts": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/expense/{refNo}/accounts",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationExpenseAccountsUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationExpenseAccountsUpdate"
          },
          "UpdateEmployeeDetailsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEmployeeDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateEmployeeDetails": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateEmployeeDetailsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateEmployeeDetails"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateEmployeeDetails"
          },
          "GetEmployeeEidLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmployeeEidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetEmployeeEid": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetEmployeeEidLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetEmployeeEid"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetEmployeeEid"
          },
          "GetAllExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllExpensesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpenses": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllExpenses"
          },
          "GetApprovedExpensesLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetApprovedExpensesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetApprovedExpenses": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetApprovedExpensesLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiExpensesApproved": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/expenses/approved",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetApprovedExpenses"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetApprovedExpenses"
          },
          "GetExpensebyIDLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetExpensebyIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetExpensebyID": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetExpensebyIDLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiGetDashexpenseExpenseidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/get-expense/{expenseId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetExpensebyID"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetExpensebyID"
          },
          "UpdateExpenseIDLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateExpenseIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdateExpenseID": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"UpdateExpenseIDLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchApiUpdateDashexpenseExpenseidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /api/update-expense/{expenseId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdateExpenseID"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdateExpenseID"
          },
          "DeleteEmployeeLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEmployeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDeleteEmployee": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"DeleteEmployeeLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteApiDeleteDashempEidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /api/delete-emp/{eID}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDeleteEmployee"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDeleteEmployee"
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Notifications",
              "AttributeDefinitions": [
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "notificationId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-ap-south-1-2823f66f-0369",
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ServerlessDeploymentBucketName"
            }
          },
          "HomeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HomeLambdaVersion6MMl5sg8hdEWgj0TQBBymxdYDvvuVkShGYxWoYBAc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HomeLambdaFunctionQualifiedArn"
            }
          },
          "ProjectFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProjectFormLambdaVersionUBndV631shYRGq7BakWipS8jMFjVlIE5UWXTU4qGA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ProjectFormLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmployeesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllEmployeesLambdaVersionoY08Kpem81qGgEZIde4UoQdU734v01EAjIE0b5mvR24"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllEmployeesLambdaFunctionQualifiedArn"
            }
          },
          "GetAllEmpCredentialsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllEmpCredentialsLambdaVersionfGzIHXdTFABvsd9i3UrGCHHBUuo4nKv5Dz89eEVGGU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllEmpCredentialsLambdaFunctionQualifiedArn"
            }
          },
          "SendOtpHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendOtpHandlerLambdaVersionr7h7g4KYoruGA8GmkB8lhUntz7q5cNR0L1SAsAwk"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-SendOtpHandlerLambdaFunctionQualifiedArn"
            }
          },
          "VerifyOtpHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "VerifyOtpHandlerLambdaVersionEzxB4RMIDPSHA8Yj3SIXPdYr0OcgH7Y5yZt5tpt1M"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-VerifyOtpHandlerLambdaFunctionQualifiedArn"
            }
          },
          "ForgotPasswordHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ForgotPasswordHandlerLambdaVersion5yOQaiOqRfQGpEiIAwM5iqPvSypfwXYL8vqDPcQ2Qs"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ForgotPasswordHandlerLambdaFunctionQualifiedArn"
            }
          },
          "GetLeaveDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLeaveDataLambdaVersionp9BXlMB1WhWfYcwg90LZ3C1PpANNf88hMHKTToI"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetLeaveDataLambdaFunctionQualifiedArn"
            }
          },
          "EmailFormatLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmailFormatLambdaVersiongqwdxUXtdVpCzi3COiGVG4IXaosYHucQoVyj6mfCA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmailFormatLambdaFunctionQualifiedArn"
            }
          },
          "ApplyLeaveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApplyLeaveLambdaVersioncIcrd5Hq82EtVv651i0M52icetgG4YOcwjKDnkz0M"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ApplyLeaveLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeEvaluationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeEvaluationLambdaVersionKCuNHyoOW5s989XIXj9ZTjUOoCcCBjrezF7RwtydCPI"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeEvaluationLambdaFunctionQualifiedArn"
            }
          },
          "EmpMailCredentialsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmpMailCredentialsLambdaVersionx0QwB3v6csayqWov3gg6abStCGFGOHaAVhezqA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmpMailCredentialsLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeStatisticsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeStatisticsLambdaVersion0D4jLvKlXFD4No0RN3hgV80UVAwdj07j9aDatV3c"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeStatisticsLambdaFunctionQualifiedArn"
            }
          },
          "GetMasterDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMasterDataLambdaVersionR9dT4ztAvaKhDxFs4aQORVEzhEcEAb8eV8RyvZtPU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetMasterDataLambdaFunctionQualifiedArn"
            }
          },
          "UpdateMasterDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateMasterDataLambdaVersionVNR8drPduksHFdFePg0o06Ug5QIqqpXvbCmlwA5y8"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateMasterDataLambdaFunctionQualifiedArn"
            }
          },
          "RegisterEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterEmployeeLambdaVersionlK542MqIBAlU9uiPSwpBNQ4rGiMjHIH9MdOjGTgZA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-RegisterEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLoginLambdaVersion2EQPwfvWLtgpbLzDfL5ncYth0tRioBVyUGPHmPwY4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLoginLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeLogoutLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeLogoutLambdaVersionwIbJEzTl08if3479JjE4BQ9luzI12M04vzJnr2ko"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeLogoutLambdaFunctionQualifiedArn"
            }
          },
          "TokenVerifyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TokenVerifyLambdaVersione7r1iCUtZTYvmSrWin1TKWEl4MDYOnD4y6zH64XVUI4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-TokenVerifyLambdaFunctionQualifiedArn"
            }
          },
          "LeadformLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LeadformLambdaVersionXMATktLOoZUPoFPlvRZQTaHbpeTSUfARd2e3Dtfc"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-LeadformLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeLambdaVersionUdZKKECkZaj9I2EFI7S9pHqacmoqtVf4EZeCegom6ck"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "ManagerNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ManagerNotificationsLambdaVersionZ2pUs8oC2KxUpUya6BKRIZrftfcSmGFhxrY22iQkyec"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ManagerNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "HandleNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HandleNotificationsLambdaVersionYdza8aeQ2OB0j9tqua5gBbYKpkfEWIk70k57rncY"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HandleNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "EmployeeExitFormLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EmployeeExitFormLambdaVersionuWbhvygXznpvHYKXPxn5K8NLbgDo6TH5s53mPAOIJE"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-EmployeeExitFormLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseSubmitLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseSubmitLambdaVersionROySNYc5lHaQOPm9lT0qXNuOQnc76l3ft3L3VhXBoE"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseSubmitLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseApproveLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseApproveLambdaVersionBxr5oZwNVyH1FMCOxoIM72T1p936v6DoP4HoMpwi2WY"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseApproveLambdaFunctionQualifiedArn"
            }
          },
          "ExpenseAccountsUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ExpenseAccountsUpdateLambdaVersionIY61OA2U3kzCZSZfL2w7DkzWMIkdj25EM6XSqUZbcA"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-ExpenseAccountsUpdateLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEmployeeDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEmployeeDetailsLambdaVersionkvtcCztSC7Pu6csDS6NWsTjR2KFkCY6a2CggRyUUKk"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateEmployeeDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetEmployeeEidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmployeeEidLambdaVersionztt5k9A8tqBL0y4F4PR13fYd0pTseSnbFBF05aG9TM"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetEmployeeEidLambdaFunctionQualifiedArn"
            }
          },
          "GetAllExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllExpensesLambdaVersionClQm6RivLvnSV0MKmGkMWROhThcEEyc3eJbk8eD4"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetAllExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetApprovedExpensesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetApprovedExpensesLambdaVersioncrn8TQFn23Ps07N8DcovpOJnYjd5jbcSB3fBYx9vlg"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetApprovedExpensesLambdaFunctionQualifiedArn"
            }
          },
          "GetExpensebyIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetExpensebyIDLambdaVersionEtuNceCRdDb6vjyoVoGGC8M5vW8n0lH2jyA1Cxqkw"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-GetExpensebyIDLambdaFunctionQualifiedArn"
            }
          },
          "UpdateExpenseIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateExpenseIDLambdaVersionuqTXl3vHU1s8IzlKtMNIma8K0h9qi443dU3Qzd0OrjU"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-UpdateExpenseIDLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEmployeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEmployeeLambdaVersionVEHSzGACZP93lQ4RnmXs0g8mgU4qkSCPcsKnqRwnNs"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-DeleteEmployeeLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-enterprise-resource-planning-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 3000
      }
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "home": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "name": "enterprise-resource-planning-dev-home",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HomeLambdaVersion6MMl5sg8hdEWgj0TQBBymxdYDvvuVkShGYxWoYBAc"
      },
      "projectForm": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/project-form",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/project-form"
          }
        ],
        "name": "enterprise-resource-planning-dev-projectForm",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ProjectFormLambdaVersionUBndV631shYRGq7BakWipS8jMFjVlIE5UWXTU4qGA"
      },
      "getAllEmployees": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/getemp",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/getemp"
          }
        ],
        "name": "enterprise-resource-planning-dev-getAllEmployees",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllEmployeesLambdaVersionoY08Kpem81qGgEZIde4UoQdU734v01EAjIE0b5mvR24"
      },
      "getAllEmpCredentials": {
        "handler": "src/Notification/routes/empCredentialsRoute.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp_credentials",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/emp_credentials"
          }
        ],
        "name": "enterprise-resource-planning-dev-getAllEmpCredentials",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllEmpCredentialsLambdaVersionfGzIHXdTFABvsd9i3UrGCHHBUuo4nKv5Dz89eEVGGU"
      },
      "sendOtpHandler": {
        "handler": "src/Notification/routes/empCredentialsRoute.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/auth/send-otp",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/auth/send-otp"
          }
        ],
        "name": "enterprise-resource-planning-dev-sendOtpHandler",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SendOtpHandlerLambdaVersionr7h7g4KYoruGA8GmkB8lhUntz7q5cNR0L1SAsAwk"
      },
      "verifyOtpHandler": {
        "handler": "src/Notification/routes/empCredentialsRoute.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/auth/verify-otp",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/auth/verify-otp"
          }
        ],
        "name": "enterprise-resource-planning-dev-verifyOtpHandler",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "VerifyOtpHandlerLambdaVersionEzxB4RMIDPSHA8Yj3SIXPdYr0OcgH7Y5yZt5tpt1M"
      },
      "forgotPasswordHandler": {
        "handler": "src/Notification/routes/empCredentialsRoute.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/auth/reset-password",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/auth/reset-password"
          }
        ],
        "name": "enterprise-resource-planning-dev-forgotPasswordHandler",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ForgotPasswordHandlerLambdaVersion5yOQaiOqRfQGpEiIAwM5iqPvSypfwXYL8vqDPcQ2Qs"
      },
      "getLeaveData": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/leave-data",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/leave-data"
          }
        ],
        "name": "enterprise-resource-planning-dev-getLeaveData",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetLeaveDataLambdaVersionp9BXlMB1WhWfYcwg90LZ3C1PpANNf88hMHKTToI"
      },
      "emailFormat": {
        "handler": "src/Notification/routes/empCredentialsRoute.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/email_format",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/email_format"
          }
        ],
        "name": "enterprise-resource-planning-dev-emailFormat",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmailFormatLambdaVersiongqwdxUXtdVpCzi3COiGVG4IXaosYHucQoVyj6mfCA"
      },
      "applyLeave": {
        "handler": "src/routes/empMaster-route.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/api/apply-leave",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/apply-leave"
          }
        ],
        "name": "enterprise-resource-planning-dev-applyLeave",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ApplyLeaveLambdaVersioncIcrd5Hq82EtVv651i0M52icetgG4YOcwjKDnkz0M"
      },
      "employeeEvaluation": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/employee-evaluation",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/employee-evaluation"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeEvaluation",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeEvaluationLambdaVersionKCuNHyoOW5s989XIXj9ZTjUOoCcCBjrezF7RwtydCPI"
      },
      "empMailCredentials": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/credentials",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/credentials"
          }
        ],
        "name": "enterprise-resource-planning-dev-empMailCredentials",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmpMailCredentialsLambdaVersionx0QwB3v6csayqWov3gg6abStCGFGOHaAVhezqA"
      },
      "employeeStatistics": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/stats",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/emp/stats"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeStatistics",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeStatisticsLambdaVersion0D4jLvKlXFD4No0RN3hgV80UVAwdj07j9aDatV3c"
      },
      "getMasterData": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/get-master-data",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/get-master-data"
          }
        ],
        "name": "enterprise-resource-planning-dev-getMasterData",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetMasterDataLambdaVersionR9dT4ztAvaKhDxFs4aQORVEzhEcEAb8eV8RyvZtPU"
      },
      "updateMasterData": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/update-master-data",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/update-master-data"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateMasterData",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateMasterDataLambdaVersionVNR8drPduksHFdFePg0o06Ug5QIqqpXvbCmlwA5y8"
      },
      "registerEmployee": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/regemp",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/regemp"
          }
        ],
        "name": "enterprise-resource-planning-dev-registerEmployee",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "RegisterEmployeeLambdaVersionlK542MqIBAlU9uiPSwpBNQ4rGiMjHIH9MdOjGTgZA"
      },
      "employeeLogin": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/emp/login"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeLogin",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeLoginLambdaVersion2EQPwfvWLtgpbLzDfL5ncYth0tRioBVyUGPHmPwY4"
      },
      "employeeLogout": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/logout",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/emp/logout"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeLogout",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeLogoutLambdaVersionwIbJEzTl08if3479JjE4BQ9luzI12M04vzJnr2ko"
      },
      "tokenVerify": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/token/verify",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/token/verify"
          }
        ],
        "name": "enterprise-resource-planning-dev-tokenVerify",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "TokenVerifyLambdaVersione7r1iCUtZTYvmSrWin1TKWEl4MDYOnD4y6zH64XVUI4"
      },
      "leadform": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/lead-form",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/lead-form"
          }
        ],
        "name": "enterprise-resource-planning-dev-leadform",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "LeadformLambdaVersionXMATktLOoZUPoFPlvRZQTaHbpeTSUfARd2e3Dtfc"
      },
      "updateEmployee": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/emp/{eID}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateEmployee",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateEmployeeLambdaVersionUdZKKECkZaj9I2EFI7S9pHqacmoqtVf4EZeCegom6ck"
      },
      "managerNotifications": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/notifications/manager",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/notifications/manager"
          }
        ],
        "name": "enterprise-resource-planning-dev-managerNotifications",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ManagerNotificationsLambdaVersionZ2pUs8oC2KxUpUya6BKRIZrftfcSmGFhxrY22iQkyec"
      },
      "handleNotifications": {
        "handler": "src/routes/empMaster-route.handler",
        "timeout": 30,
        "events": [
          {
            "httpApi": {
              "path": "/api/notifications/handle",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/notifications/handle"
          }
        ],
        "name": "enterprise-resource-planning-dev-handleNotifications",
        "package": {},
        "memory": 1024,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "HandleNotificationsLambdaVersionYdza8aeQ2OB0j9tqua5gBbYKpkfEWIk70k57rncY"
      },
      "employeeExitForm": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/exit-form",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/exit-form"
          }
        ],
        "name": "enterprise-resource-planning-dev-employeeExitForm",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "EmployeeExitFormLambdaVersionuWbhvygXznpvHYKXPxn5K8NLbgDo6TH5s53mPAOIJE"
      },
      "expenseSubmit": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/expense"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseSubmit",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseSubmitLambdaVersionROySNYc5lHaQOPm9lT0qXNuOQnc76l3ft3L3VhXBoE"
      },
      "expenseApprove": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense/{refNo}/approve",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/expense/{refNo}/approve"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseApprove",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseApproveLambdaVersionBxr5oZwNVyH1FMCOxoIM72T1p936v6DoP4HoMpwi2WY"
      },
      "expenseAccountsUpdate": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expense/{refNo}/accounts",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/expense/{refNo}/accounts"
          }
        ],
        "name": "enterprise-resource-planning-dev-expenseAccountsUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ExpenseAccountsUpdateLambdaVersionIY61OA2U3kzCZSZfL2w7DkzWMIkdj25EM6XSqUZbcA"
      },
      "updateEmployeeDetails": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/update-emp/{eID}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/update-emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateEmployeeDetails",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateEmployeeDetailsLambdaVersionkvtcCztSC7Pu6csDS6NWsTjR2KFkCY6a2CggRyUUKk"
      },
      "getEmployeeEid": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/get-emp/{eID}",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/get-emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-getEmployeeEid",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetEmployeeEidLambdaVersionztt5k9A8tqBL0y4F4PR13fYd0pTseSnbFBF05aG9TM"
      },
      "getAllExpenses": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expenses",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/expenses"
          }
        ],
        "name": "enterprise-resource-planning-dev-getAllExpenses",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetAllExpensesLambdaVersionClQm6RivLvnSV0MKmGkMWROhThcEEyc3eJbk8eD4"
      },
      "getApprovedExpenses": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/expenses/approved",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/expenses/approved"
          }
        ],
        "name": "enterprise-resource-planning-dev-getApprovedExpenses",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetApprovedExpensesLambdaVersioncrn8TQFn23Ps07N8DcovpOJnYjd5jbcSB3fBYx9vlg"
      },
      "getExpensebyID": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/get-expense/{expenseId}",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/get-expense/{expenseId}"
          }
        ],
        "name": "enterprise-resource-planning-dev-getExpensebyID",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetExpensebyIDLambdaVersionEtuNceCRdDb6vjyoVoGGC8M5vW8n0lH2jyA1Cxqkw"
      },
      "updateExpenseID": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/update-expense/{expenseId}",
              "method": "PATCH"
            },
            "resolvedMethod": "PATCH",
            "resolvedPath": "/api/update-expense/{expenseId}"
          }
        ],
        "name": "enterprise-resource-planning-dev-updateExpenseID",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateExpenseIDLambdaVersionuqTXl3vHU1s8IzlKtMNIma8K0h9qi443dU3Qzd0OrjU"
      },
      "deleteEmployee": {
        "handler": "src/routes/empMaster-route.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/delete-emp/{eID}",
              "method": "DELETE"
            },
            "resolvedMethod": "DELETE",
            "resolvedPath": "/api/delete-emp/{eID}"
          }
        ],
        "name": "enterprise-resource-planning-dev-deleteEmployee",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "DeleteEmployeeLambdaVersionVEHSzGACZP93lQ4RnmXs0g8mgU4qkSCPcsKnqRwnNs"
      }
    },
    "resources": {
      "Resources": {
        "NotificationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "Notifications",
            "AttributeDefinitions": [
              {
                "AttributeName": "notificationId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "notificationId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "org": "developer4568",
      "service": "enterprise-resource-planning",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      }
    },
    "appId": null,
    "org": "developer4568",
    "orgId": null,
    "layers": {},
    "artifact": "C:\\Users\\daksh\\OneDrive\\Desktop\\AmergingERP1\\AmergingERP\\Backend\\.serverless\\enterprise-resource-planning.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/enterprise-resource-planning/dev/1745001727510-2025-04-18T18:42:07.510Z",
    "artifact": "enterprise-resource-planning.zip"
  }
}