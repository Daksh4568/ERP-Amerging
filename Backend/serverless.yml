# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: developer4568
service: enterprise-resource-planning # Name of your service/project

provider:
  name: aws
  runtime: nodejs20.x
  region: ap-south-1
  timeout: 30
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
      maxAge: 86400 # Cache preflight response for 24 hours
  environment:
    MONGO_URI: mongodb+srv://dakshthakurdev:REiZX78kSdjZkF7H@erpcluster.9yztv.mongodb.net/
    #MONGO_URI: mongodb+srv://Keshav:keshav123@erplivecluster.cxoju.mongodb.net/
    JWT_SECRET: amergingtech5757
    EMAIL_USER: daksh4568thakur@gmail.com
    EMAIL_PASSWORD: jygu sxbi fvnf sczm
    ENCRYPTION_KEY: 9f1c3a2e4b9a7d5e1c3a6f4b7e9c2a1d8b6e3c7a1d9f2e4b5c8a3d1e7f9c0b2a

functions:
  home:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /
          method: GET

  projectForm:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/project-form
          method: POST

  getAllEmployees:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/getemp
          method: GET
  getAllEmpCredentials:
    handler: src/Notification/routes/empCredentialsRoute.handler
    events:
      - httpApi:
          path: /api/emp_credentials
          method: GET

  getLeaveData:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/leave-data
          method: GET

  applyLeave:
    handler: src/routes/empMaster-route.handler
    timeout: 30
    events:
      - httpApi:
          path: /api/apply-leave
          method: POST

  employeeEvaluation:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/employee-evaluation
          method: POST
  empMailCredentials:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/credentials
          method: POST

  employeeStatistics:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/emp/stats
          method: GET
  getMasterData:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/get-master-data
          method: GET

  updateMasterData:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/update-master-data
          method: PATCH

  registerEmployee:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/regemp
          method: POST

  employeeLogin:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/emp/login
          method: POST

  employeeLogout:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/emp/logout
          method: POST

  tokenVerify:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/token/verify
          method: POST

  leadform:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/lead-form
          method: POST

  updateEmployee:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/emp/{eID}
          method: PATCH

  managerNotifications:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/notifications/manager
          method: GET

  handleNotifications:
    handler: src/routes/empMaster-route.handler
    timeout: 30
    events:
      - httpApi:
          path: /api/notifications/handle
          method: PATCH

  employeeExitForm:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/exit-form
          method: POST

  expenseSubmit:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/expense
          method: POST

  expenseApprove:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/expense/{refNo}/approve
          method: PATCH

  expenseAccountsUpdate:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/expense/{refNo}/accounts
          method: PATCH

  updateEmployeeDetails:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/update-emp/{eID}
          method: PATCH
  getEmployeeEid:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/get-emp/{eID}
          method: GET

  getAllExpenses:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/expenses
          method: GET

  getApprovedExpenses:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/expenses/approved
          method: GET
  getExpensebyID:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/get-expense/{expenseId}
          method: GET

  updateExpenseID:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/update-expense/{expenseId}
          method: PATCH

  deleteEmployee:
    handler: src/routes/empMaster-route.handler
    events:
      - httpApi:
          path: /api/delete-emp/{eID}
          method: DELETE
plugins:
  - serverless-offline

resources:
  Resources:
    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Notifications
        AttributeDefinitions:
          - AttributeName: notificationId
            AttributeType: S
        KeySchema:
          - AttributeName: notificationId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  serverless-offline:
    httpPort: 3000
